{"version":3,"sources":["@wordpress/data/src/plugins/persistence/index.js"],"names":["DEFAULT_STORAGE","defaultStorage","DEFAULT_STORAGE_KEY","withLazySameState","reducer","state","action","nextState","createPersistenceInterface","options","storage","storageKey","data","getData","undefined","persisted","getItem","JSON","parse","error","setData","key","value","setItem","stringify","get","set","persistencePlugin","registry","pluginOptions","persistence","createPersistOnChange","getState","storeName","keys","getPersistedState","Array","isArray","reducers","reduce","accumulator","Object","assign","lastState","registerStore","persist","persistedState","initialState","type","store","subscribe","migrateFeaturePreferencesToPreferencesStore","sourceStoreName","preferencesStoreName","interfaceStoreName","interfaceFeatures","preferences","features","sourceFeatures","featuresToMigrate","existingPreferences","otherInterfaceState","otherInterfaceScopes","otherSourceState","sourcePreferences","migrateIndividualPreferenceToPreferencesStore","from","scope","convert","identity","sourcePreference","targetPreference","otherScopes","otherPreferences","convertedPreferences","allSourcePreferences","convertEditPostPanels","panels","convertedData","panelName","panel","enabled","inactivePanels","push","opened","openPanels","migrateThirdPartyFeaturePreferencesToPreferencesStore","interfaceScopes","startsWith","migrateInterfaceEnableItemsToPreferencesStore","sourceEnableItems","enableItems","allPreferences","sourceComplementaryAreas","singleEnableItems","complementaryArea","convertedComplementaryAreas","sourcePinnedItems","multipleEnableItems","pinnedItems","allConvertedData","otherInterfaceItems","__unstableMigrate"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { merge, isPlainObject, identity } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport defaultStorage from './storage/default';\nimport { combineReducers } from '../../';\n\n/** @typedef {import('../../registry').WPDataRegistry} WPDataRegistry */\n\n/** @typedef {import('../../registry').WPDataPlugin} WPDataPlugin */\n\n/**\n * @typedef {Object} WPDataPersistencePluginOptions Persistence plugin options.\n *\n * @property {Storage} storage    Persistent storage implementation. This must\n *                                at least implement `getItem` and `setItem` of\n *                                the Web Storage API.\n * @property {string}  storageKey Key on which to set in persistent storage.\n *\n */\n\n/**\n * Default plugin storage.\n *\n * @type {Storage}\n */\nconst DEFAULT_STORAGE = defaultStorage;\n\n/**\n * Default plugin storage key.\n *\n * @type {string}\n */\nconst DEFAULT_STORAGE_KEY = 'WP_DATA';\n\n/**\n * Higher-order reducer which invokes the original reducer only if state is\n * inequal from that of the action's `nextState` property, otherwise returning\n * the original state reference.\n *\n * @param {Function} reducer Original reducer.\n *\n * @return {Function} Enhanced reducer.\n */\nexport const withLazySameState = ( reducer ) => ( state, action ) => {\n\tif ( action.nextState === state ) {\n\t\treturn state;\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Creates a persistence interface, exposing getter and setter methods (`get`\n * and `set` respectively).\n *\n * @param {WPDataPersistencePluginOptions} options Plugin options.\n *\n * @return {Object} Persistence interface.\n */\nexport function createPersistenceInterface( options ) {\n\tconst {\n\t\tstorage = DEFAULT_STORAGE,\n\t\tstorageKey = DEFAULT_STORAGE_KEY,\n\t} = options;\n\n\tlet data;\n\n\t/**\n\t * Returns the persisted data as an object, defaulting to an empty object.\n\t *\n\t * @return {Object} Persisted data.\n\t */\n\tfunction getData() {\n\t\tif ( data === undefined ) {\n\t\t\t// If unset, getItem is expected to return null. Fall back to\n\t\t\t// empty object.\n\t\t\tconst persisted = storage.getItem( storageKey );\n\t\t\tif ( persisted === null ) {\n\t\t\t\tdata = {};\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tdata = JSON.parse( persisted );\n\t\t\t\t} catch ( error ) {\n\t\t\t\t\t// Similarly, should any error be thrown during parse of\n\t\t\t\t\t// the string (malformed JSON), fall back to empty object.\n\t\t\t\t\tdata = {};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn data;\n\t}\n\n\t/**\n\t * Merges an updated reducer state into the persisted data.\n\t *\n\t * @param {string} key   Key to update.\n\t * @param {*}      value Updated value.\n\t */\n\tfunction setData( key, value ) {\n\t\tdata = { ...data, [ key ]: value };\n\t\tstorage.setItem( storageKey, JSON.stringify( data ) );\n\t}\n\n\treturn {\n\t\tget: getData,\n\t\tset: setData,\n\t};\n}\n\n/**\n * Data plugin to persist store state into a single storage key.\n *\n * @param {WPDataRegistry}                  registry      Data registry.\n * @param {?WPDataPersistencePluginOptions} pluginOptions Plugin options.\n *\n * @return {WPDataPlugin} Data plugin.\n */\nfunction persistencePlugin( registry, pluginOptions ) {\n\tconst persistence = createPersistenceInterface( pluginOptions );\n\n\t/**\n\t * Creates an enhanced store dispatch function, triggering the state of the\n\t * given store name to be persisted when changed.\n\t *\n\t * @param {Function}       getState  Function which returns current state.\n\t * @param {string}         storeName Store name.\n\t * @param {?Array<string>} keys      Optional subset of keys to save.\n\t *\n\t * @return {Function} Enhanced dispatch function.\n\t */\n\tfunction createPersistOnChange( getState, storeName, keys ) {\n\t\tlet getPersistedState;\n\t\tif ( Array.isArray( keys ) ) {\n\t\t\t// Given keys, the persisted state should by produced as an object\n\t\t\t// of the subset of keys. This implementation uses combineReducers\n\t\t\t// to leverage its behavior of returning the same object when none\n\t\t\t// of the property values changes. This allows a strict reference\n\t\t\t// equality to bypass a persistence set on an unchanging state.\n\t\t\tconst reducers = keys.reduce(\n\t\t\t\t( accumulator, key ) =>\n\t\t\t\t\tObject.assign( accumulator, {\n\t\t\t\t\t\t[ key ]: ( state, action ) => action.nextState[ key ],\n\t\t\t\t\t} ),\n\t\t\t\t{}\n\t\t\t);\n\n\t\t\tgetPersistedState = withLazySameState(\n\t\t\t\tcombineReducers( reducers )\n\t\t\t);\n\t\t} else {\n\t\t\tgetPersistedState = ( state, action ) => action.nextState;\n\t\t}\n\n\t\tlet lastState = getPersistedState( undefined, {\n\t\t\tnextState: getState(),\n\t\t} );\n\n\t\treturn () => {\n\t\t\tconst state = getPersistedState( lastState, {\n\t\t\t\tnextState: getState(),\n\t\t\t} );\n\t\t\tif ( state !== lastState ) {\n\t\t\t\tpersistence.set( storeName, state );\n\t\t\t\tlastState = state;\n\t\t\t}\n\t\t};\n\t}\n\n\treturn {\n\t\tregisterStore( storeName, options ) {\n\t\t\tif ( ! options.persist ) {\n\t\t\t\treturn registry.registerStore( storeName, options );\n\t\t\t}\n\n\t\t\t// Load from persistence to use as initial state.\n\t\t\tconst persistedState = persistence.get()[ storeName ];\n\t\t\tif ( persistedState !== undefined ) {\n\t\t\t\tlet initialState = options.reducer( options.initialState, {\n\t\t\t\t\ttype: '@@WP/PERSISTENCE_RESTORE',\n\t\t\t\t} );\n\n\t\t\t\tif (\n\t\t\t\t\tisPlainObject( initialState ) &&\n\t\t\t\t\tisPlainObject( persistedState )\n\t\t\t\t) {\n\t\t\t\t\t// If state is an object, ensure that:\n\t\t\t\t\t// - Other keys are left intact when persisting only a\n\t\t\t\t\t//   subset of keys.\n\t\t\t\t\t// - New keys in what would otherwise be used as initial\n\t\t\t\t\t//   state are deeply merged as base for persisted value.\n\t\t\t\t\tinitialState = merge( {}, initialState, persistedState );\n\t\t\t\t} else {\n\t\t\t\t\t// If there is a mismatch in object-likeness of default\n\t\t\t\t\t// initial or persisted state, defer to persisted value.\n\t\t\t\t\tinitialState = persistedState;\n\t\t\t\t}\n\n\t\t\t\toptions = {\n\t\t\t\t\t...options,\n\t\t\t\t\tinitialState,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst store = registry.registerStore( storeName, options );\n\n\t\t\tstore.subscribe(\n\t\t\t\tcreatePersistOnChange(\n\t\t\t\t\tstore.getState,\n\t\t\t\t\tstoreName,\n\t\t\t\t\toptions.persist\n\t\t\t\t)\n\t\t\t);\n\n\t\t\treturn store;\n\t\t},\n\t};\n}\n\n/**\n * Move the 'features' object in local storage from the sourceStoreName to the\n * preferences store.\n *\n * @param {Object} persistence     The persistence interface.\n * @param {string} sourceStoreName The name of the store that has persisted\n *                                 preferences to migrate to the preferences\n *                                 package.\n */\nexport function migrateFeaturePreferencesToPreferencesStore(\n\tpersistence,\n\tsourceStoreName\n) {\n\tconst preferencesStoreName = 'core/preferences';\n\tconst interfaceStoreName = 'core/interface';\n\n\tconst state = persistence.get();\n\n\t// Features most recently (and briefly) lived in the interface package.\n\t// If data exists there, prioritize using that for the migration. If not\n\t// also check the original package as the user may have updated from an\n\t// older block editor version.\n\tconst interfaceFeatures =\n\t\tstate[ interfaceStoreName ]?.preferences?.features?.[ sourceStoreName ];\n\tconst sourceFeatures = state[ sourceStoreName ]?.preferences?.features;\n\tconst featuresToMigrate = interfaceFeatures\n\t\t? interfaceFeatures\n\t\t: sourceFeatures;\n\n\tif ( featuresToMigrate ) {\n\t\tconst existingPreferences = state[ preferencesStoreName ]?.preferences;\n\n\t\t// Avoid migrating features again if they've previously been migrated.\n\t\tif ( ! existingPreferences?.[ sourceStoreName ] ) {\n\t\t\t// Set the feature values in the interface store, the features\n\t\t\t// object is keyed by 'scope', which matches the store name for\n\t\t\t// the source.\n\t\t\tpersistence.set( preferencesStoreName, {\n\t\t\t\tpreferences: {\n\t\t\t\t\t...existingPreferences,\n\t\t\t\t\t[ sourceStoreName ]: featuresToMigrate,\n\t\t\t\t},\n\t\t\t} );\n\n\t\t\t// Remove migrated feature preferences from `interface`.\n\t\t\tif ( interfaceFeatures ) {\n\t\t\t\tconst otherInterfaceState = state[ interfaceStoreName ];\n\t\t\t\tconst otherInterfaceScopes =\n\t\t\t\t\tstate[ interfaceStoreName ]?.preferences?.features;\n\n\t\t\t\tpersistence.set( interfaceStoreName, {\n\t\t\t\t\t...otherInterfaceState,\n\t\t\t\t\tpreferences: {\n\t\t\t\t\t\tfeatures: {\n\t\t\t\t\t\t\t...otherInterfaceScopes,\n\t\t\t\t\t\t\t[ sourceStoreName ]: undefined,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Remove migrated feature preferences from the source.\n\t\t\tif ( sourceFeatures ) {\n\t\t\t\tconst otherSourceState = state[ sourceStoreName ];\n\t\t\t\tconst sourcePreferences = state[ sourceStoreName ]?.preferences;\n\n\t\t\t\tpersistence.set( sourceStoreName, {\n\t\t\t\t\t...otherSourceState,\n\t\t\t\t\tpreferences: {\n\t\t\t\t\t\t...sourcePreferences,\n\t\t\t\t\t\tfeatures: undefined,\n\t\t\t\t\t},\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Migrates an individual item inside the `preferences` object for a store.\n *\n * @param {Object}    persistence   The persistence interface.\n * @param {Object}    migrate       An options object that contains details of the migration.\n * @param {string}    migrate.from  The name of the store to migrate from.\n * @param {string}    migrate.scope The scope in the preferences store to migrate to.\n * @param {string}    key           The key in the preferences object to migrate.\n * @param {?Function} convert       A function that converts preferences from one format to another.\n */\nexport function migrateIndividualPreferenceToPreferencesStore(\n\tpersistence,\n\t{ from: sourceStoreName, scope },\n\tkey,\n\tconvert = identity\n) {\n\tconst preferencesStoreName = 'core/preferences';\n\tconst state = persistence.get();\n\tconst sourcePreference = state[ sourceStoreName ]?.preferences?.[ key ];\n\n\t// There's nothing to migrate, exit early.\n\tif ( sourcePreference === undefined ) {\n\t\treturn;\n\t}\n\n\tconst targetPreference =\n\t\tstate[ preferencesStoreName ]?.preferences?.[ scope ]?.[ key ];\n\n\t// There's existing data at the target, so don't overwrite it, exit early.\n\tif ( targetPreference ) {\n\t\treturn;\n\t}\n\n\tconst otherScopes = state[ preferencesStoreName ]?.preferences;\n\tconst otherPreferences =\n\t\tstate[ preferencesStoreName ]?.preferences?.[ scope ];\n\n\t// Pass an object with the key and value as this allows the convert\n\t// function to convert to a data structure that has different keys.\n\tconst convertedPreferences = convert( { [ key ]: sourcePreference } );\n\n\tpersistence.set( preferencesStoreName, {\n\t\tpreferences: {\n\t\t\t...otherScopes,\n\t\t\t[ scope ]: {\n\t\t\t\t...otherPreferences,\n\t\t\t\t...convertedPreferences,\n\t\t\t},\n\t\t},\n\t} );\n\n\t// Remove migrated feature preferences from the source.\n\tconst otherSourceState = state[ sourceStoreName ];\n\tconst allSourcePreferences = state[ sourceStoreName ]?.preferences;\n\tpersistence.set( sourceStoreName, {\n\t\t...otherSourceState,\n\t\tpreferences: {\n\t\t\t...allSourcePreferences,\n\t\t\t[ key ]: undefined,\n\t\t},\n\t} );\n}\n\n/**\n * Convert from:\n * ```\n * {\n *     panels: {\n *         tags: {\n *             enabled: true,\n *             opened: true,\n *         },\n *         permalinks: {\n *             enabled: false,\n *             opened: false,\n *         },\n *     },\n * }\n * ```\n *\n * to:\n * {\n *     inactivePanels: [\n *         'permalinks',\n *     ],\n *     openPanels: [\n *         'tags',\n *     ],\n * }\n *\n * @param {Object} preferences A preferences object.\n *\n * @return {Object} The converted data.\n */\nexport function convertEditPostPanels( preferences ) {\n\tconst panels = preferences?.panels ?? {};\n\treturn Object.keys( panels ).reduce(\n\t\t( convertedData, panelName ) => {\n\t\t\tconst panel = panels[ panelName ];\n\n\t\t\tif ( panel?.enabled === false ) {\n\t\t\t\tconvertedData.inactivePanels.push( panelName );\n\t\t\t}\n\n\t\t\tif ( panel?.opened === true ) {\n\t\t\t\tconvertedData.openPanels.push( panelName );\n\t\t\t}\n\n\t\t\treturn convertedData;\n\t\t},\n\t\t{ inactivePanels: [], openPanels: [] }\n\t);\n}\n\nexport function migrateThirdPartyFeaturePreferencesToPreferencesStore(\n\tpersistence\n) {\n\tconst interfaceStoreName = 'core/interface';\n\tconst preferencesStoreName = 'core/preferences';\n\n\tlet state = persistence.get();\n\n\tconst interfaceScopes = state[ interfaceStoreName ]?.preferences?.features;\n\n\tfor ( const scope in interfaceScopes ) {\n\t\t// Don't migrate any core 'scopes'.\n\t\tif ( scope.startsWith( 'core' ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Skip this scope if there are no features to migrate.\n\t\tconst featuresToMigrate = interfaceScopes[ scope ];\n\t\tif ( ! featuresToMigrate ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst existingPreferences = state[ preferencesStoreName ]?.preferences;\n\n\t\t// Add the data to the preferences store structure.\n\t\tpersistence.set( preferencesStoreName, {\n\t\t\tpreferences: {\n\t\t\t\t...existingPreferences,\n\t\t\t\t[ scope ]: featuresToMigrate,\n\t\t\t},\n\t\t} );\n\n\t\t// Remove the data from the interface store structure.\n\t\t// Call `persistence.get` again to make sure `state` is up-to-date with\n\t\t// any changes from the previous iteration of this loop.\n\t\tstate = persistence.get();\n\t\tconst otherInterfaceState = state[ interfaceStoreName ];\n\t\tconst otherInterfaceScopes =\n\t\t\tstate[ interfaceStoreName ]?.preferences?.features;\n\n\t\tpersistence.set( interfaceStoreName, {\n\t\t\t...otherInterfaceState,\n\t\t\tpreferences: {\n\t\t\t\tfeatures: {\n\t\t\t\t\t...otherInterfaceScopes,\n\t\t\t\t\t[ scope ]: undefined,\n\t\t\t\t},\n\t\t\t},\n\t\t} );\n\t}\n}\n\n/**\n * Migrates interface 'enableItems' data to the preferences store.\n *\n * The interface package stores this data in this format:\n * ```js\n * {\n *     enableItems: {\n *         singleEnableItems: {\n * \t           complementaryArea: {\n *                 'core/edit-post': 'edit-post/document',\n *                 'core/edit-site': 'edit-site/global-styles',\n *             }\n *         },\n *         multipleEnableItems: {\n *             pinnedItems: {\n *                 'core/edit-post': {\n *                     'plugin-1': true,\n *                 },\n *                 'core/edit-site': {\n *                     'plugin-2': true,\n *                 },\n *             },\n *         }\n *     }\n * }\n * ```\n * and it should be migrated it to:\n * ```js\n * {\n *     'core/edit-post': {\n *         complementaryArea: 'edit-post/document',\n *         pinnedItems: {\n *             'plugin-1': true,\n *         },\n *     },\n *     'core/edit-site': {\n *         complementaryArea: 'edit-site/global-styles',\n *         pinnedItems: {\n *             'plugin-2': true,\n *         },\n *     },\n * }\n * ```\n *\n * @param {Object} persistence The persistence interface.\n */\nexport function migrateInterfaceEnableItemsToPreferencesStore( persistence ) {\n\tconst interfaceStoreName = 'core/interface';\n\tconst preferencesStoreName = 'core/preferences';\n\tconst state = persistence.get();\n\tconst sourceEnableItems = state[ interfaceStoreName ]?.enableItems;\n\n\t// There's nothing to migrate, exit early.\n\tif ( ! sourceEnableItems ) {\n\t\treturn;\n\t}\n\n\tconst allPreferences = state[ preferencesStoreName ]?.preferences ?? {};\n\n\t// First convert complementaryAreas into the right format.\n\t// Use the existing preferences as the accumulator so that the data is\n\t// merged.\n\tconst sourceComplementaryAreas =\n\t\tsourceEnableItems?.singleEnableItems?.complementaryArea ?? {};\n\n\tconst convertedComplementaryAreas = Object.keys(\n\t\tsourceComplementaryAreas\n\t).reduce( ( accumulator, scope ) => {\n\t\tconst data = sourceComplementaryAreas[ scope ];\n\n\t\t// Don't overwrite any existing data in the preferences store.\n\t\tif ( accumulator[ scope ]?.complementaryArea ) {\n\t\t\treturn accumulator;\n\t\t}\n\n\t\treturn {\n\t\t\t...accumulator,\n\t\t\t[ scope ]: {\n\t\t\t\t...accumulator[ scope ],\n\t\t\t\tcomplementaryArea: data,\n\t\t\t},\n\t\t};\n\t}, allPreferences );\n\n\t// Next feed the converted complementary areas back into a reducer that\n\t// converts the pinned items, resulting in the fully migrated data.\n\tconst sourcePinnedItems =\n\t\tsourceEnableItems?.multipleEnableItems?.pinnedItems ?? {};\n\tconst allConvertedData = Object.keys( sourcePinnedItems ).reduce(\n\t\t( accumulator, scope ) => {\n\t\t\tconst data = sourcePinnedItems[ scope ];\n\t\t\t// Don't overwrite any existing data in the preferences store.\n\t\t\tif ( accumulator[ scope ]?.pinnedItems ) {\n\t\t\t\treturn accumulator;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...accumulator,\n\t\t\t\t[ scope ]: {\n\t\t\t\t\t...accumulator[ scope ],\n\t\t\t\t\tpinnedItems: data,\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t\tconvertedComplementaryAreas\n\t);\n\n\tpersistence.set( preferencesStoreName, {\n\t\tpreferences: allConvertedData,\n\t} );\n\n\t// Remove migrated preferences.\n\tconst otherInterfaceItems = state[ interfaceStoreName ];\n\tpersistence.set( interfaceStoreName, {\n\t\t...otherInterfaceItems,\n\t\tenableItems: undefined,\n\t} );\n}\n\npersistencePlugin.__unstableMigrate = ( pluginOptions ) => {\n\tconst persistence = createPersistenceInterface( pluginOptions );\n\n\t// Boolean feature preferences.\n\tmigrateFeaturePreferencesToPreferencesStore(\n\t\tpersistence,\n\t\t'core/edit-widgets'\n\t);\n\tmigrateFeaturePreferencesToPreferencesStore(\n\t\tpersistence,\n\t\t'core/customize-widgets'\n\t);\n\tmigrateFeaturePreferencesToPreferencesStore(\n\t\tpersistence,\n\t\t'core/edit-post'\n\t);\n\tmigrateFeaturePreferencesToPreferencesStore(\n\t\tpersistence,\n\t\t'core/edit-site'\n\t);\n\tmigrateThirdPartyFeaturePreferencesToPreferencesStore( persistence );\n\n\t// Other ad-hoc preferences.\n\tmigrateIndividualPreferenceToPreferencesStore(\n\t\tpersistence,\n\t\t{ from: 'core/edit-post', scope: 'core/edit-post' },\n\t\t'hiddenBlockTypes'\n\t);\n\tmigrateIndividualPreferenceToPreferencesStore(\n\t\tpersistence,\n\t\t{ from: 'core/edit-post', scope: 'core/edit-post' },\n\t\t'editorMode'\n\t);\n\tmigrateIndividualPreferenceToPreferencesStore(\n\t\tpersistence,\n\t\t{ from: 'core/edit-post', scope: 'core/edit-post' },\n\t\t'preferredStyleVariations'\n\t);\n\tmigrateIndividualPreferenceToPreferencesStore(\n\t\tpersistence,\n\t\t{ from: 'core/edit-post', scope: 'core/edit-post' },\n\t\t'panels',\n\t\tconvertEditPostPanels\n\t);\n\tmigrateIndividualPreferenceToPreferencesStore(\n\t\tpersistence,\n\t\t{ from: 'core/editor', scope: 'core/edit-post' },\n\t\t'isPublishSidebarEnabled'\n\t);\n\tmigrateIndividualPreferenceToPreferencesStore(\n\t\tpersistence,\n\t\t{ from: 'core/edit-site', scope: 'core/edit-site' },\n\t\t'editorMode'\n\t);\n\tmigrateInterfaceEnableItemsToPreferencesStore( persistence );\n};\n\nexport default persistencePlugin;\n"]}