"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _lodash = require("lodash");

var _domScrollIntoView = _interopRequireDefault(require("dom-scroll-into-view"));

var _classnames = _interopRequireDefault(require("classnames"));

var _compose = require("@wordpress/compose");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
const emptyList = Object.freeze([]);

const handleMouseDown = e => {
  // By preventing default here, we will not lose focus of <input> when clicking a suggestion.
  e.preventDefault();
};

function SuggestionsList(_ref) {
  let {
    selectedIndex,
    scrollIntoView,
    match = '',
    onHover,
    onSelect,
    suggestions = emptyList,
    displayTransform,
    instanceId,
    setTimeout
  } = _ref;
  const [scrollingIntoView, setScrollingIntoView] = (0, _element.useState)(false);
  const listRef = (0, _compose.useRefEffect)(listNode => {
    // only have to worry about scrolling selected suggestion into view
    // when already expanded.
    if (selectedIndex > -1 && scrollIntoView && listNode.children[selectedIndex]) {
      setScrollingIntoView(true);
      (0, _domScrollIntoView.default)(listNode.children[selectedIndex], listNode, {
        onlyScrollIfNeeded: true
      });
      setTimeout(() => {
        setScrollingIntoView(false);
      }, 100);
    }
  }, [selectedIndex, scrollIntoView]);

  const handleHover = suggestion => {
    return () => {
      if (!scrollingIntoView) {
        onHover === null || onHover === void 0 ? void 0 : onHover(suggestion);
      }
    };
  };

  const handleClick = suggestion => {
    return () => {
      onSelect === null || onSelect === void 0 ? void 0 : onSelect(suggestion);
    };
  };

  const computeSuggestionMatch = suggestion => {
    const matchText = displayTransform(match || '').toLocaleLowerCase();

    if (matchText.length === 0) {
      return null;
    }

    suggestion = displayTransform(suggestion);
    const indexOfMatch = suggestion.toLocaleLowerCase().indexOf(matchText);
    return {
      suggestionBeforeMatch: suggestion.substring(0, indexOfMatch),
      suggestionMatch: suggestion.substring(indexOfMatch, indexOfMatch + matchText.length),
      suggestionAfterMatch: suggestion.substring(indexOfMatch + matchText.length)
    };
  }; // We set `tabIndex` here because otherwise Firefox sets focus on this
  // div when tabbing off of the input in `TokenField` -- not really sure
  // why, since usually a div isn't focusable by default
  // TODO does this still apply now that it's a <ul> and not a <div>?


  return (0, _element.createElement)("ul", {
    ref: listRef,
    className: "components-form-token-field__suggestions-list",
    id: `components-form-token-suggestions-${instanceId}`,
    role: "listbox"
  }, (0, _lodash.map)(suggestions, (suggestion, index) => {
    const matchText = computeSuggestionMatch(suggestion);
    const className = (0, _classnames.default)('components-form-token-field__suggestion', {
      'is-selected': index === selectedIndex
    });
    /* eslint-disable jsx-a11y/click-events-have-key-events */

    return (0, _element.createElement)("li", {
      id: `components-form-token-suggestions-${instanceId}-${index}`,
      role: "option",
      className: className,
      key: suggestion !== null && suggestion !== void 0 && suggestion.value ? suggestion.value : displayTransform(suggestion),
      onMouseDown: handleMouseDown,
      onClick: handleClick(suggestion),
      onMouseEnter: handleHover(suggestion),
      "aria-selected": index === selectedIndex
    }, matchText ? (0, _element.createElement)("span", {
      "aria-label": displayTransform(suggestion)
    }, matchText.suggestionBeforeMatch, (0, _element.createElement)("strong", {
      className: "components-form-token-field__suggestion-match"
    }, matchText.suggestionMatch), matchText.suggestionAfterMatch) : displayTransform(suggestion));
    /* eslint-enable jsx-a11y/click-events-have-key-events */
  }));
}

var _default = (0, _compose.withSafeTimeout)(SuggestionsList);

exports.default = _default;
//# sourceMappingURL=suggestions-list.js.map