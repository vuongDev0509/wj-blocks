"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _borderControlDropdown = _interopRequireDefault(require("../border-control-dropdown"));

var _unitControl = _interopRequireDefault(require("../../unit-control"));

var _rangeControl = _interopRequireDefault(require("../../range-control"));

var _hStack = require("../../h-stack");

var _baseControlStyles = require("../../base-control/styles/base-control-styles");

var _view = require("../../view");

var _visuallyHidden = require("../../visually-hidden");

var _context = require("../../ui/context");

var _hook = require("./hook");

/**
 * Internal dependencies
 */
const BorderLabel = props => {
  const {
    label,
    hideLabelFromVision
  } = props;

  if (!label) {
    return null;
  }

  return hideLabelFromVision ? (0, _element.createElement)(_visuallyHidden.VisuallyHidden, {
    as: "label"
  }, label) : (0, _element.createElement)(_baseControlStyles.StyledLabel, null, label);
};

const BorderControl = (props, forwardedRef) => {
  const {
    colors,
    disableCustomColors,
    enableAlpha,
    enableStyle = true,
    hideLabelFromVision,
    innerWrapperClassName,
    label,
    onBorderChange,
    onSliderChange,
    onWidthChange,
    placeholder,
    popoverContentClassName,
    previousStyleSelection,
    showDropdownHeader,
    sliderClassName,
    value: border,
    widthControlClassName,
    widthUnit,
    widthValue,
    withSlider,
    __experimentalHasMultipleOrigins,
    __experimentalIsRenderedInSidebar,
    ...otherProps
  } = (0, _hook.useBorderControl)(props);
  return (0, _element.createElement)(_view.View, (0, _extends2.default)({}, otherProps, {
    ref: forwardedRef
  }), (0, _element.createElement)(BorderLabel, {
    label: label,
    hideLabelFromVision: hideLabelFromVision
  }), (0, _element.createElement)(_hStack.HStack, {
    spacing: 3
  }, (0, _element.createElement)(_hStack.HStack, {
    className: innerWrapperClassName,
    alignment: "stretch"
  }, (0, _element.createElement)(_borderControlDropdown.default, {
    border: border,
    colors: colors,
    contentClassName: popoverContentClassName,
    disableCustomColors: disableCustomColors,
    enableAlpha: enableAlpha,
    enableStyle: enableStyle,
    onChange: onBorderChange,
    previousStyleSelection: previousStyleSelection,
    showDropdownHeader: showDropdownHeader,
    __experimentalHasMultipleOrigins: __experimentalHasMultipleOrigins,
    __experimentalIsRenderedInSidebar: __experimentalIsRenderedInSidebar
  }), (0, _element.createElement)(_unitControl.default, {
    className: widthControlClassName,
    min: 0,
    onChange: onWidthChange,
    value: (border === null || border === void 0 ? void 0 : border.width) || '',
    placeholder: placeholder
  })), withSlider && (0, _element.createElement)(_rangeControl.default, {
    className: sliderClassName,
    initialPosition: 0,
    max: 100,
    min: 0,
    onChange: onSliderChange,
    step: ['px', '%'].includes(widthUnit) ? 1 : 0.1,
    value: widthValue || undefined,
    withInputField: false
  })));
};

const ConnectedBorderControl = (0, _context.contextConnect)(BorderControl, 'BorderControl');
var _default = ConnectedBorderControl;
exports.default = _default;
//# sourceMappingURL=component.js.map