"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DropZoneComponent;

var _element = require("@wordpress/element");

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

var _dom = require("@wordpress/dom");

var _compose = require("@wordpress/compose");

var _animation = require("../animation");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function DropZoneComponent(_ref) {
  let {
    className,
    label,
    onFilesDrop,
    onHTMLDrop,
    onDrop
  } = _ref;
  const [isDraggingOverDocument, setIsDraggingOverDocument] = (0, _element.useState)();
  const [isDraggingOverElement, setIsDraggingOverElement] = (0, _element.useState)();
  const [type, setType] = (0, _element.useState)();
  const ref = (0, _compose.__experimentalUseDropZone)({
    onDrop(event) {
      const files = (0, _dom.getFilesFromDataTransfer)(event.dataTransfer);
      const html = event.dataTransfer.getData('text/html');
      /**
       * From Windows Chrome 96, the `event.dataTransfer` returns both file object and HTML.
       * The order of the checks is important to recognise the HTML drop.
       */

      if (html && onHTMLDrop) {
        onHTMLDrop(html);
      } else if (files.length && onFilesDrop) {
        onFilesDrop(files);
      } else if (onDrop) {
        onDrop(event);
      }
    },

    onDragStart(event) {
      setIsDraggingOverDocument(true);
      let _type = 'default';
      /**
       * From Windows Chrome 96, the `event.dataTransfer` returns both file object and HTML.
       * The order of the checks is important to recognise the HTML drop.
       */

      if ((0, _lodash.includes)(event.dataTransfer.types, 'text/html')) {
        _type = 'html';
      } else if ( // Check for the types because sometimes the files themselves
      // are only available on drop.
      (0, _lodash.includes)(event.dataTransfer.types, 'Files') || (0, _dom.getFilesFromDataTransfer)(event.dataTransfer).length > 0) {
        _type = 'file';
      }

      setType(_type);
    },

    onDragEnd() {
      setIsDraggingOverDocument(false);
      setType();
    },

    onDragEnter() {
      setIsDraggingOverElement(true);
    },

    onDragLeave() {
      setIsDraggingOverElement(false);
    }

  });
  const disableMotion = (0, _compose.useReducedMotion)();
  let children;
  const backdrop = {
    hidden: {
      scaleY: 0,
      opacity: 0
    },
    show: {
      scaleY: 1,
      opacity: 1,
      transition: {
        type: 'tween',
        duration: 0.2,
        delay: 0.1,
        delayChildren: 0.2
      }
    },
    exit: {
      scaleY: 1,
      opacity: 0,
      transition: {
        duration: 0.3,
        delayChildren: 0
      }
    }
  };
  const foreground = {
    hidden: {
      opacity: 0,
      scale: 0.75
    },
    show: {
      opacity: 1,
      scale: 1
    },
    exit: {
      opacity: 0,
      scale: 0.9
    }
  };

  if (isDraggingOverElement) {
    children = (0, _element.createElement)(_animation.__unstableMotion.div, {
      variants: backdrop,
      initial: disableMotion ? 'show' : 'hidden',
      animate: "show",
      exit: disableMotion ? 'show' : 'exit',
      className: "components-drop-zone__content"
    }, (0, _element.createElement)(_animation.__unstableMotion.div, {
      variants: foreground
    }, (0, _element.createElement)(_icons.Icon, {
      icon: _icons.upload,
      className: "components-drop-zone__content-icon"
    }), (0, _element.createElement)("span", {
      className: "components-drop-zone__content-text"
    }, label ? label : (0, _i18n.__)('Drop files to upload'))));
  }

  const classes = (0, _classnames.default)('components-drop-zone', className, {
    'is-active': (isDraggingOverDocument || isDraggingOverElement) && (type === 'file' && onFilesDrop || type === 'html' && onHTMLDrop || type === 'default' && onDrop),
    'is-dragging-over-document': isDraggingOverDocument,
    'is-dragging-over-element': isDraggingOverElement,
    [`is-dragging-${type}`]: !!type
  });
  return (0, _element.createElement)("div", {
    ref: ref,
    className: classes
  }, disableMotion ? children : (0, _element.createElement)(_animation.__unstableAnimatePresence, null, children));
}
//# sourceMappingURL=index.js.map