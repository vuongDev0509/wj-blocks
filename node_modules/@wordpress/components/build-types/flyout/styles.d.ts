/// <reference types="react" />
/**
 * External dependencies
 */
import { StyledComponent } from '@emotion/styled';
import { Popover as ReakitPopover } from 'reakit';
export declare const FlyoutContentView: StyledComponent<React.ComponentPropsWithoutRef<typeof ReakitPopover>>;
export declare const CardView: StyledComponent<import("../surface/types").Props & {
    size?: import("../card/types").SizeOptions | "extraSmall" | undefined;
} & {
    elevation?: number | undefined;
    isBorderless?: boolean | undefined;
    isRounded?: boolean | undefined;
    isElevated?: boolean | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>> & {
    ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
}, "as" | "elevation" | "size" | keyof import("../surface/types").Props | "isBorderless" | "isRounded" | "isElevated"> & {
    as?: keyof JSX.IntrinsicElements | undefined;
} & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
//# sourceMappingURL=styles.d.ts.map