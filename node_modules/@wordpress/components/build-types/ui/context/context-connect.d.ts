import type { ForwardedRef, ReactChild, ReactNode } from 'react';
import type { WordPressComponentFromProps } from '.';
declare type ContextConnectOptions = {
    /** Defaults to `false`. */
    memo?: boolean;
};
/**
 * Forwards ref (React.ForwardRef) and "Connects" (or registers) a component
 * within the Context system under a specified namespace.
 *
 * This is an (experimental) evolution of the initial connect() HOC.
 * The hope is that we can improve render performance by removing functional
 * component wrappers.
 *
 * @param  Component The component to register into the Context system.
 * @param  namespace The namespace to register the component under.
 * @param  options
 * @return The connected WordPressComponent
 */
export declare function contextConnect<P>(Component: (props: P, ref: ForwardedRef<any>) => JSX.Element | null, namespace: string, options?: ContextConnectOptions): WordPressComponentFromProps<P>;
/**
 * Attempts to retrieve the connected namespace from a component.
 *
 * @param  Component The component to retrieve a namespace from.
 * @return The connected namespaces.
 */
export declare function getConnectNamespace(Component: ReactChild | undefined | {}): string[];
/**
 * Checks to see if a component is connected within the Context system.
 *
 * @param  Component The component to retrieve a namespace from.
 * @param  match     The namespace to check.
 */
export declare function hasConnectNamespace(Component: ReactNode, match: string[] | string): boolean;
export {};
//# sourceMappingURL=context-connect.d.ts.map