/// <reference types="react" />
import type { SelectSize } from '../types';
declare type SelectProps = {
    selectSize: SelectSize;
};
declare type InputProps = {
    disableUnits?: boolean;
    size: SelectSize;
};
export declare const Root: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const ValueInput: import("@emotion/styled").StyledComponent<Pick<{
    [x: string]: any;
    __unstableStateReducer: any;
    className: any;
    dragDirection?: string | undefined;
    hideHTMLArrows?: boolean | undefined;
    isDragEnabled?: boolean | undefined;
    isShiftStepEnabled?: boolean | undefined;
    label: any;
    max?: number | undefined;
    min?: number | undefined;
    required?: boolean | undefined;
    shiftStep?: number | undefined;
    step?: number | undefined;
    type?: string | undefined;
    value: any;
}, string | number> & import("react").RefAttributes<any> & {
    theme?: import("@emotion/react").Theme | undefined;
} & InputProps, {}, {}>;
export declare const UnitLabel: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & SelectProps, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const UnitSelect: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & SelectProps, import("react").DetailedHTMLProps<import("react").SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>, {}>;
export {};
//# sourceMappingURL=unit-control-styles.d.ts.map