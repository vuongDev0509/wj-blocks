import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports
import { Radio } from 'reakit';
/**
 * WordPress dependencies
 */

import { useInstanceId } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import { contextConnect, useContextSystem } from '../../ui/context';
import { useToggleGroupControlContext } from '../context';
import * as styles from './styles';
import { useCx } from '../../utils/hooks';
import Tooltip from '../../tooltip';
const {
  ButtonContentView,
  LabelView
} = styles;

const WithToolTip = _ref => {
  let {
    showTooltip,
    text,
    children
  } = _ref;

  if (showTooltip && text) {
    return createElement(Tooltip, {
      text: text,
      position: "top center"
    }, children);
  }

  return createElement(Fragment, null, children);
};

function ToggleGroupControlOptionBase(props, forwardedRef) {
  const toggleGroupControlContext = useToggleGroupControlContext();
  const id = useInstanceId(ToggleGroupControlOptionBase, toggleGroupControlContext.baseId || 'toggle-group-control-option-base');
  const buttonProps = useContextSystem({ ...props,
    id
  }, 'ToggleGroupControlOptionBase');
  const {
    className,
    isBlock = false,
    value,
    children,
    showTooltip = false,
    ...radioProps
  } = { ...toggleGroupControlContext,
    ...buttonProps
  };
  const isActive = radioProps.state === value;
  const cx = useCx();
  const labelViewClasses = cx(isBlock && styles.labelBlock);
  const classes = cx(styles.buttonView, className, isActive && styles.buttonActive);
  return createElement(LabelView, {
    className: labelViewClasses,
    "data-active": isActive
  }, createElement(WithToolTip, {
    showTooltip: showTooltip,
    text: radioProps['aria-label']
  }, createElement(Radio, _extends({}, radioProps, {
    as: "button",
    "aria-label": radioProps['aria-label'],
    className: classes,
    "data-value": value,
    ref: forwardedRef,
    value: value
  }), createElement(ButtonContentView, null, children))));
}
/**
 * `ToggleGroupControlOptionBase` is a form component and is meant to be used as an internal,
 * generic component for any children of `ToggleGroupControl`.
 *
 * @example
 * ```jsx
 * import {
 *   __experimentalToggleGroupControl as ToggleGroupControl,
 *   __experimentalToggleGroupControlOptionBase as ToggleGroupControlOptionBase,
 * } from '@wordpress/components';
 *
 * function Example() {
 *   return (
 *     <ToggleGroupControl label="my label" value="vertical" isBlock>
 *       <ToggleGroupControlOption value="horizontal" label="Horizontal" />
 *       <ToggleGroupControlOption value="vertical" label="Vertical" />
 *     </ToggleGroupControl>
 *   );
 * }
 * ```
 */


const ConnectedToggleGroupControlOptionBase = contextConnect(ToggleGroupControlOptionBase, 'ToggleGroupControlOptionBase');
export default ConnectedToggleGroupControlOptionBase;
//# sourceMappingURL=component.js.map