{"version":3,"sources":["@wordpress/components/src/border-control/styles.ts"],"names":["css","COLORS","CONFIG","rtl","space","StyledField","StyledLabel","BackdropUI","Root","UnitControlWrapper","labelStyles","borderControl","innerWrapper","borderWidth","gray","marginLeft","wrapperWidth","width","borderControlDropdown","borderRadius","borderRight","borderLeft","colorIndicatorBorder","border","color","style","fallbackColor","undefined","colorIndicatorWrapper","borderControlPopover","borderControlPopoverControls","borderControlPopoverContent","borderColorIndicator","resetButton","borderWidthControl","paddingRight","borderControlStylePicker","borderStyleButton","borderSlider","marginRight"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { css } from '@emotion/react';\nimport type { CSSProperties } from 'react';\n\n/**\n * Internal dependencies\n */\nimport { COLORS, CONFIG, rtl } from '../utils';\nimport { space } from '../ui/utils/space';\nimport {\n\tStyledField,\n\tStyledLabel,\n} from '../base-control/styles/base-control-styles';\nimport { BackdropUI } from '../input-control/styles/input-control-styles';\nimport { Root as UnitControlWrapper } from '../unit-control/styles/unit-control-styles';\n\nimport type { Border } from './types';\n\nconst labelStyles = css`\n\tfont-weight: 500;\n`;\n\nexport const borderControl = css`\n\tposition: relative;\n`;\n\nexport const innerWrapper = () => css`\n\tborder: ${ CONFIG.borderWidth } solid ${ COLORS.gray[ 200 ] };\n\tborder-radius: 2px;\n\tflex: 1 0 40%;\n\n\t/*\n\t * Needs more thought. Aim is to prevent the border for BorderBoxControl\n\t * showing through the control. Likely needs to take into account\n\t * light/dark themes etc.\n\t */\n\tbackground: #fff;\n\n\t/*\n\t * Forces the width control to fill available space given UnitControl\n\t * passes its className directly through to the input.\n\t */\n\t${ UnitControlWrapper } {\n\t\tflex: 1;\n\t\t${ rtl( { marginLeft: 0 } )() }\n\t}\n`;\n\nexport const wrapperWidth = ( width: CSSProperties[ 'width' ] ) => {\n\treturn css`\n\t\twidth: ${ width };\n\t\tflex: 0 0 auto;\n\t`;\n};\n\nexport const borderControlDropdown = () => css`\n\tbackground: #fff;\n\t${ rtl(\n\t\t{\n\t\t\tborderRadius: `1px 0 0 1px`,\n\t\t\tborderRight: `${ CONFIG.borderWidth } solid ${ COLORS.gray[ 200 ] }`,\n\t\t},\n\t\t{\n\t\t\tborderRadius: `0 1px 1px 0`,\n\t\t\tborderLeft: `${ CONFIG.borderWidth } solid ${ COLORS.gray[ 200 ] }`,\n\t\t}\n\t)() }\n\n\t&& > button {\n\t\tpadding: ${ space( 1 ) };\n\t\tborder-radius: inherit;\n\t}\n`;\n\nexport const colorIndicatorBorder = ( border?: Border ) => {\n\tconst { color, style } = border || {};\n\n\tconst fallbackColor =\n\t\t!! style && style !== 'none' ? COLORS.gray[ 300 ] : undefined;\n\n\treturn css`\n\t\tborder-style: ${ style === 'none' ? 'solid' : style };\n\t\tborder-color: ${ color || fallbackColor };\n\t`;\n};\n\nexport const colorIndicatorWrapper = ( border?: Border ) => {\n\tconst { style } = border || {};\n\n\treturn css`\n\t\tborder-radius: 9999px;\n\t\tborder: 2px solid transparent;\n\t\t${ style ? colorIndicatorBorder( border ) : undefined }\n\t\twidth: 28px;\n\t\theight: 28px;\n\t\tpadding: 2px;\n\n\t\t/*\n\t\t * ColorIndicator\n\t\t *\n\t\t * The transparent colors used here ensure visibility of the indicator\n\t\t * over the active state of the border control dropdown's toggle button.\n\t\t */\n\t\t& > span {\n\t\t\tbackground: linear-gradient(\n\t\t\t\t-45deg,\n\t\t\t\ttransparent 48%,\n\t\t\t\trgb( 0 0 0 / 20% ) 48%,\n\t\t\t\trgb( 0 0 0 / 20% ) 52%,\n\t\t\t\ttransparent 52%\n\t\t\t);\n\t\t}\n\t`;\n};\n\nexport const borderControlPopover = css`\n\t/* Remove padding from content, this will be re-added via inner elements*/\n\t&& > div > div {\n\t\tpadding: 0;\n\t}\n`;\n\nexport const borderControlPopoverControls = css`\n\tpadding: ${ space( 2 ) };\n\n\t> div:first-of-type > ${ StyledLabel } {\n\t\tmargin-bottom: 0;\n\t\t${ labelStyles }\n\t}\n\n\t&& ${ StyledLabel } + button:not( .has-text ) {\n\t\tmin-width: 24px;\n\t\tpadding: 0;\n\t}\n`;\n\nexport const borderControlPopoverContent = css``;\nexport const borderColorIndicator = css``;\n\nexport const resetButton = css`\n\tjustify-content: center;\n\twidth: 100%;\n\n\t/* Override button component styling */\n\t&& {\n\t\tborder-top: ${ CONFIG.borderWidth } solid ${ COLORS.gray[ 200 ] };\n\t\theight: 46px;\n\t}\n`;\n\nexport const borderWidthControl = () => css`\n\t/* Target the InputControl's backdrop */\n\t&&& ${ BackdropUI } {\n\t\tborder: none;\n\t}\n\n\t/* Specificity required to overcome UnitControl padding */\n\t/* See packages/components/src/unit-control/styles/unit-control-styles.ts */\n\t&&& input {\n\t\t${ rtl( { paddingRight: 0 } )() }\n\t}\n`;\n\nexport const borderControlStylePicker = css`\n\t${ StyledLabel } {\n\t\t${ labelStyles }\n\t}\n`;\n\nexport const borderStyleButton = css`\n\t&&&&& {\n\t\tmin-width: 30px;\n\t\twidth: 30px;\n\t\theight: 30px;\n\t\tpadding: 3px;\n\t}\n`;\n\nexport const borderSlider = () => css`\n\tflex: 1 1 60%;\n\t${ rtl( { marginRight: space( 3 ) } )() }\n\n\t${ StyledField } {\n\t\tmargin-bottom: 0;\n\t\tfont-size: 0;\n\t\tdisplay: flex;\n\t}\n`;\n"]}