import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * Internal dependencies
 */
import BorderControlDropdown from '../border-control-dropdown';
import UnitControl from '../../unit-control';
import RangeControl from '../../range-control';
import { HStack } from '../../h-stack';
import { StyledLabel } from '../../base-control/styles/base-control-styles';
import { View } from '../../view';
import { VisuallyHidden } from '../../visually-hidden';
import { contextConnect } from '../../ui/context';
import { useBorderControl } from './hook';

const BorderLabel = props => {
  const {
    label,
    hideLabelFromVision
  } = props;

  if (!label) {
    return null;
  }

  return hideLabelFromVision ? createElement(VisuallyHidden, {
    as: "label"
  }, label) : createElement(StyledLabel, null, label);
};

const BorderControl = (props, forwardedRef) => {
  const {
    colors,
    disableCustomColors,
    enableAlpha,
    enableStyle = true,
    hideLabelFromVision,
    innerWrapperClassName,
    label,
    onBorderChange,
    onSliderChange,
    onWidthChange,
    placeholder,
    popoverContentClassName,
    previousStyleSelection,
    showDropdownHeader,
    sliderClassName,
    value: border,
    widthControlClassName,
    widthUnit,
    widthValue,
    withSlider,
    __experimentalHasMultipleOrigins,
    __experimentalIsRenderedInSidebar,
    ...otherProps
  } = useBorderControl(props);
  return createElement(View, _extends({}, otherProps, {
    ref: forwardedRef
  }), createElement(BorderLabel, {
    label: label,
    hideLabelFromVision: hideLabelFromVision
  }), createElement(HStack, {
    spacing: 3
  }, createElement(HStack, {
    className: innerWrapperClassName,
    alignment: "stretch"
  }, createElement(BorderControlDropdown, {
    border: border,
    colors: colors,
    contentClassName: popoverContentClassName,
    disableCustomColors: disableCustomColors,
    enableAlpha: enableAlpha,
    enableStyle: enableStyle,
    onChange: onBorderChange,
    previousStyleSelection: previousStyleSelection,
    showDropdownHeader: showDropdownHeader,
    __experimentalHasMultipleOrigins: __experimentalHasMultipleOrigins,
    __experimentalIsRenderedInSidebar: __experimentalIsRenderedInSidebar
  }), createElement(UnitControl, {
    className: widthControlClassName,
    min: 0,
    onChange: onWidthChange,
    value: (border === null || border === void 0 ? void 0 : border.width) || '',
    placeholder: placeholder
  })), withSlider && createElement(RangeControl, {
    className: sliderClassName,
    initialPosition: 0,
    max: 100,
    min: 0,
    onChange: onSliderChange,
    step: ['px', '%'].includes(widthUnit) ? 1 : 0.1,
    value: widthValue || undefined,
    withInputField: false
  })));
};

const ConnectedBorderControl = contextConnect(BorderControl, 'BorderControl');
export default ConnectedBorderControl;
//# sourceMappingURL=component.js.map