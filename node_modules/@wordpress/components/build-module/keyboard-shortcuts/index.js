import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { map } from 'lodash';
/**
 * WordPress dependencies
 */

import { useRef, Children } from '@wordpress/element';
import { useKeyboardShortcut } from '@wordpress/compose';

function KeyboardShortcut(_ref) {
  let {
    target,
    callback,
    shortcut,
    bindGlobal,
    eventName
  } = _ref;
  useKeyboardShortcut(shortcut, callback, {
    bindGlobal,
    target,
    eventName
  });
  return null;
}

function KeyboardShortcuts(_ref2) {
  let {
    children,
    shortcuts,
    bindGlobal,
    eventName
  } = _ref2;
  const target = useRef();
  const element = map(shortcuts, (callback, shortcut) => createElement(KeyboardShortcut, {
    key: shortcut,
    shortcut: shortcut,
    callback: callback,
    bindGlobal: bindGlobal,
    eventName: eventName,
    target: target
  })); // Render as non-visual if there are no children pressed. Keyboard
  // events will be bound to the document instead.

  if (!Children.count(children)) {
    return element;
  }

  return createElement("div", {
    ref: target
  }, element, children);
}

export default KeyboardShortcuts;
//# sourceMappingURL=index.js.map