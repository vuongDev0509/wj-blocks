import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import BorderBoxControlLinkedButton from '../border-box-control-linked-button';
import BorderBoxControlSplitControls from '../border-box-control-split-controls';
import { BorderControl } from '../../border-control';
import { HStack } from '../../h-stack';
import { StyledLabel } from '../../base-control/styles/base-control-styles';
import { View } from '../../view';
import { VisuallyHidden } from '../../visually-hidden';
import { contextConnect } from '../../ui/context';
import { useBorderBoxControl } from './hook';

const BorderLabel = props => {
  const {
    label,
    hideLabelFromVision
  } = props;

  if (!label) {
    return null;
  }

  return hideLabelFromVision ? createElement(VisuallyHidden, {
    as: "label"
  }, label) : createElement(StyledLabel, null, label);
};

const BorderBoxControl = (props, forwardedRef) => {
  const {
    className,
    colors,
    disableCustomColors,
    enableAlpha,
    enableStyle,
    hasMixedBorders,
    hideLabelFromVision,
    isLinked,
    label,
    linkedControlClassName,
    linkedValue,
    onLinkedChange,
    onSplitChange,
    popoverClassNames,
    splitValue,
    toggleLinked,
    __experimentalHasMultipleOrigins,
    __experimentalIsRenderedInSidebar,
    ...otherProps
  } = useBorderBoxControl(props);
  return createElement(View, _extends({
    className: className
  }, otherProps, {
    ref: forwardedRef
  }), createElement(BorderLabel, {
    label: label,
    hideLabelFromVision: hideLabelFromVision
  }), createElement(HStack, {
    alignment: 'start',
    expanded: true,
    spacing: 0
  }, isLinked ? createElement(BorderControl, {
    className: linkedControlClassName,
    colors: colors,
    disableCustomColors: disableCustomColors,
    enableAlpha: enableAlpha,
    enableStyle: enableStyle,
    onChange: onLinkedChange,
    placeholder: hasMixedBorders ? __('Mixed') : undefined,
    popoverContentClassName: popoverClassNames === null || popoverClassNames === void 0 ? void 0 : popoverClassNames.linked,
    shouldSanitizeBorder: false // This component will handle that.
    ,
    value: linkedValue,
    withSlider: true,
    width: '110px',
    __experimentalHasMultipleOrigins: __experimentalHasMultipleOrigins,
    __experimentalIsRenderedInSidebar: __experimentalIsRenderedInSidebar
  }) : createElement(BorderBoxControlSplitControls, {
    colors: colors,
    disableCustomColors: disableCustomColors,
    enableAlpha: enableAlpha,
    enableStyle: enableStyle,
    onChange: onSplitChange,
    popoverClassNames: popoverClassNames,
    value: splitValue,
    __experimentalHasMultipleOrigins: __experimentalHasMultipleOrigins,
    __experimentalIsRenderedInSidebar: __experimentalIsRenderedInSidebar
  }), createElement(BorderBoxControlLinkedButton, {
    onClick: toggleLinked,
    isLinked: isLinked
  })));
};

const ConnectedBorderBoxControl = contextConnect(BorderBoxControl, 'BorderBoxControl');
export default ConnectedBorderBoxControl;
//# sourceMappingURL=component.js.map