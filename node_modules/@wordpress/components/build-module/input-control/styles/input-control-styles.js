import _extends from "@babel/runtime/helpers/esm/extends";
import _styled from "@emotion/styled/base";
import { createElement } from "@wordpress/element";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

/**
 * External dependencies
 */
import { css } from '@emotion/react';
import { Flex, FlexItem } from '../../flex';
import { Text } from '../../text';
import { COLORS, rtl } from '../../utils';

var _ref6 = process.env.NODE_ENV === "production" ? {
  name: "1739oy8",
  styles: "z-index:1"
} : {
  name: "1x8rmag-rootFocusedStyles",
  styles: "z-index:1;label:rootFocusedStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

const rootFocusedStyles = _ref7 => {
  let {
    isFocused
  } = _ref7;
  if (!isFocused) return '';
  return _ref6;
};

var _ref3 = process.env.NODE_ENV === "production" ? {
  name: "2o6p8u",
  styles: "justify-content:space-between"
} : {
  name: "10jbul8-rootLabelPositionStyles",
  styles: "justify-content:space-between;label:rootLabelPositionStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref4 = process.env.NODE_ENV === "production" ? {
  name: "14qk3ip",
  styles: "align-items:flex-start;flex-direction:column-reverse"
} : {
  name: "1vipors-rootLabelPositionStyles",
  styles: "align-items:flex-start;flex-direction:column-reverse;label:rootLabelPositionStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref5 = process.env.NODE_ENV === "production" ? {
  name: "hbng6e",
  styles: "align-items:flex-start;flex-direction:column"
} : {
  name: "5xjcce-rootLabelPositionStyles",
  styles: "align-items:flex-start;flex-direction:column;label:rootLabelPositionStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvaW5wdXQtY29udHJvbC9zdHlsZXMvaW5wdXQtY29udHJvbC1zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFDYSIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2lucHV0LWNvbnRyb2wvc3R5bGVzL2lucHV0LWNvbnRyb2wtc3R5bGVzLnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGNzcywgU2VyaWFsaXplZFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB0eXBlIHsgQ1NTUHJvcGVydGllcywgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgdHlwZSB7IFdvcmRQcmVzc0NvbXBvbmVudFByb3BzIH0gZnJvbSAnLi4vLi4vdWkvY29udGV4dCc7XG5pbXBvcnQgeyBGbGV4LCBGbGV4SXRlbSB9IGZyb20gJy4uLy4uL2ZsZXgnO1xuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uL3RleHQnO1xuaW1wb3J0IHsgQ09MT1JTLCBydGwgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgdHlwZSB7IExhYmVsUG9zaXRpb24sIFNpemUgfSBmcm9tICcuLi90eXBlcyc7XG5cbnR5cGUgQ29udGFpbmVyUHJvcHMgPSB7XG5cdGRpc2FibGVkPzogYm9vbGVhbjtcblx0aGlkZUxhYmVsPzogYm9vbGVhbjtcblx0X191bnN0YWJsZUlucHV0V2lkdGg/OiBDU1NQcm9wZXJ0aWVzWyAnd2lkdGgnIF07XG5cdGxhYmVsUG9zaXRpb24/OiBMYWJlbFBvc2l0aW9uO1xufTtcblxudHlwZSBSb290UHJvcHMgPSB7XG5cdGlzRm9jdXNlZD86IGJvb2xlYW47XG5cdGxhYmVsUG9zaXRpb24/OiBMYWJlbFBvc2l0aW9uO1xufTtcblxuY29uc3Qgcm9vdEZvY3VzZWRTdHlsZXMgPSAoIHsgaXNGb2N1c2VkIH06IFJvb3RQcm9wcyApID0+IHtcblx0aWYgKCAhIGlzRm9jdXNlZCApIHJldHVybiAnJztcblxuXHRyZXR1cm4gY3NzKCB7IHpJbmRleDogMSB9ICk7XG59O1xuXG5jb25zdCByb290TGFiZWxQb3NpdGlvblN0eWxlcyA9ICggeyBsYWJlbFBvc2l0aW9uIH06IFJvb3RQcm9wcyApID0+IHtcblx0c3dpdGNoICggbGFiZWxQb3NpdGlvbiApIHtcblx0XHRjYXNlICd0b3AnOlxuXHRcdFx0cmV0dXJuIGNzc2Bcblx0XHRcdFx0YWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG5cdFx0XHRcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cdFx0XHRgO1xuXHRcdGNhc2UgJ2JvdHRvbSc6XG5cdFx0XHRyZXR1cm4gY3NzYFxuXHRcdFx0XHRhbGlnbi1pdGVtczogZmxleC1zdGFydDtcblx0XHRcdFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlO1xuXHRcdFx0YDtcblx0XHRjYXNlICdlZGdlJzpcblx0XHRcdHJldHVybiBjc3NgXG5cdFx0XHRcdGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcblx0XHRcdGA7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiAnJztcblx0fVxufTtcblxuZXhwb3J0IGNvbnN0IFJvb3QgPSBzdHlsZWQoIEZsZXggKTwgUm9vdFByb3BzID5gXG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0Ym9yZGVyLXJhZGl1czogMnB4O1xuXHRwYWRkaW5nLXRvcDogMDtcblx0JHsgcm9vdEZvY3VzZWRTdHlsZXMgfVxuXHQkeyByb290TGFiZWxQb3NpdGlvblN0eWxlcyB9XG5gO1xuXG5jb25zdCBjb250YWluZXJEaXNhYmxlZFN0eWxlcyA9ICggeyBkaXNhYmxlZCB9OiBDb250YWluZXJQcm9wcyApID0+IHtcblx0Y29uc3QgYmFja2dyb3VuZENvbG9yID0gZGlzYWJsZWRcblx0XHQ/IENPTE9SUy51aS5iYWNrZ3JvdW5kRGlzYWJsZWRcblx0XHQ6IENPTE9SUy51aS5iYWNrZ3JvdW5kO1xuXG5cdHJldHVybiBjc3MoIHsgYmFja2dyb3VuZENvbG9yIH0gKTtcbn07XG5cbi8vIE5vcm1hbGl6ZXMgdGhlIG1hcmdpbnMgZnJvbSB0aGUgPEZsZXggLz4gKGNvbXBvbmVudHMvdWkvZmxleC8pIGNvbnRhaW5lci5cbmNvbnN0IGNvbnRhaW5lck1hcmdpblN0eWxlcyA9ICggeyBoaWRlTGFiZWwgfTogQ29udGFpbmVyUHJvcHMgKSA9PiB7XG5cdHJldHVybiBoaWRlTGFiZWwgPyBjc3MoIHsgbWFyZ2luOiAnMCAhaW1wb3J0YW50JyB9ICkgOiBudWxsO1xufTtcblxuY29uc3QgY29udGFpbmVyV2lkdGhTdHlsZXMgPSAoIHtcblx0X191bnN0YWJsZUlucHV0V2lkdGgsXG5cdGxhYmVsUG9zaXRpb24sXG59OiBDb250YWluZXJQcm9wcyApID0+IHtcblx0aWYgKCAhIF9fdW5zdGFibGVJbnB1dFdpZHRoICkgcmV0dXJuIGNzcyggeyB3aWR0aDogJzEwMCUnIH0gKTtcblxuXHRpZiAoIGxhYmVsUG9zaXRpb24gPT09ICdzaWRlJyApIHJldHVybiAnJztcblxuXHRpZiAoIGxhYmVsUG9zaXRpb24gPT09ICdlZGdlJyApIHtcblx0XHRyZXR1cm4gY3NzKCB7XG5cdFx0XHRmbGV4OiBgMCAwICR7IF9fdW5zdGFibGVJbnB1dFdpZHRoIH1gLFxuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiBjc3MoIHsgd2lkdGg6IF9fdW5zdGFibGVJbnB1dFdpZHRoIH0gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBDb250YWluZXIgPSBzdHlsZWQuZGl2PCBDb250YWluZXJQcm9wcyA+YFxuXHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRib3JkZXItcmFkaXVzOiBpbmhlcml0O1xuXHRkaXNwbGF5OiBmbGV4O1xuXHRmbGV4OiAxO1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cblx0JHsgY29udGFpbmVyRGlzYWJsZWRTdHlsZXMgfVxuXHQkeyBjb250YWluZXJNYXJnaW5TdHlsZXMgfVxuXHQkeyBjb250YWluZXJXaWR0aFN0eWxlcyB9XG5gO1xuXG50eXBlIElucHV0UHJvcHMgPSB7XG5cdGRpc2FibGVkPzogYm9vbGVhbjtcblx0aW5wdXRTaXplPzogU2l6ZTtcblx0aXNEcmFnZ2luZz86IGJvb2xlYW47XG5cdGRyYWdDdXJzb3I/OiBDU1NQcm9wZXJ0aWVzWyAnY3Vyc29yJyBdO1xufTtcblxuY29uc3QgZGlzYWJsZWRTdHlsZXMgPSAoIHsgZGlzYWJsZWQgfTogSW5wdXRQcm9wcyApID0+IHtcblx0aWYgKCAhIGRpc2FibGVkICkgcmV0dXJuICcnO1xuXG5cdHJldHVybiBjc3MoIHtcblx0XHRjb2xvcjogQ09MT1JTLnVpLnRleHREaXNhYmxlZCxcblx0fSApO1xufTtcblxuY29uc3QgZm9udFNpemVTdHlsZXMgPSAoIHsgaW5wdXRTaXplOiBzaXplIH06IElucHV0UHJvcHMgKSA9PiB7XG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdGRlZmF1bHQ6ICcxM3B4Jyxcblx0XHRzbWFsbDogJzExcHgnLFxuXHRcdCdfX3Vuc3RhYmxlLWxhcmdlJzogJzEzcHgnLFxuXHR9O1xuXG5cdGNvbnN0IGZvbnRTaXplID0gc2l6ZXNbIHNpemUgYXMgU2l6ZSBdIHx8IHNpemVzLmRlZmF1bHQ7XG5cdGNvbnN0IGZvbnRTaXplTW9iaWxlID0gJzE2cHgnO1xuXG5cdGlmICggISBmb250U2l6ZSApIHJldHVybiAnJztcblxuXHRyZXR1cm4gY3NzYFxuXHRcdGZvbnQtc2l6ZTogJHsgZm9udFNpemVNb2JpbGUgfTtcblxuXHRcdEBtZWRpYSAoIG1pbi13aWR0aDogNjAwcHggKSB7XG5cdFx0XHRmb250LXNpemU6ICR7IGZvbnRTaXplIH07XG5cdFx0fVxuXHRgO1xufTtcblxuY29uc3Qgc2l6ZVN0eWxlcyA9ICggeyBpbnB1dFNpemU6IHNpemUgfTogSW5wdXRQcm9wcyApID0+IHtcblx0Y29uc3Qgc2l6ZXMgPSB7XG5cdFx0ZGVmYXVsdDoge1xuXHRcdFx0aGVpZ2h0OiAzMCxcblx0XHRcdGxpbmVIZWlnaHQ6IDEsXG5cdFx0XHRtaW5IZWlnaHQ6IDMwLFxuXHRcdFx0cGFkZGluZ0xlZnQ6IDgsXG5cdFx0XHRwYWRkaW5nUmlnaHQ6IDgsXG5cdFx0fSxcblx0XHRzbWFsbDoge1xuXHRcdFx0aGVpZ2h0OiAyNCxcblx0XHRcdGxpbmVIZWlnaHQ6IDEsXG5cdFx0XHRtaW5IZWlnaHQ6IDI0LFxuXHRcdFx0cGFkZGluZ0xlZnQ6IDgsXG5cdFx0XHRwYWRkaW5nUmlnaHQ6IDgsXG5cdFx0fSxcblx0XHQnX191bnN0YWJsZS1sYXJnZSc6IHtcblx0XHRcdGhlaWdodDogNDAsXG5cdFx0XHRsaW5lSGVpZ2h0OiAxLFxuXHRcdFx0bWluSGVpZ2h0OiA0MCxcblx0XHRcdHBhZGRpbmdMZWZ0OiAxNixcblx0XHRcdHBhZGRpbmdSaWdodDogMTYsXG5cdFx0fSxcblx0fTtcblxuXHRjb25zdCBzdHlsZSA9IHNpemVzWyBzaXplIGFzIFNpemUgXSB8fCBzaXplcy5kZWZhdWx0O1xuXG5cdHJldHVybiBjc3MoIHN0eWxlICk7XG59O1xuXG5jb25zdCBkcmFnU3R5bGVzID0gKCB7IGlzRHJhZ2dpbmcsIGRyYWdDdXJzb3IgfTogSW5wdXRQcm9wcyApID0+IHtcblx0bGV0IGRlZmF1bHRBcnJvd1N0eWxlczogU2VyaWFsaXplZFN0eWxlcyB8IHVuZGVmaW5lZDtcblx0bGV0IGFjdGl2ZURyYWdDdXJzb3JTdHlsZXM6IFNlcmlhbGl6ZWRTdHlsZXMgfCB1bmRlZmluZWQ7XG5cblx0aWYgKCBpc0RyYWdnaW5nICkge1xuXHRcdGRlZmF1bHRBcnJvd1N0eWxlcyA9IGNzc2Bcblx0XHRcdGN1cnNvcjogJHsgZHJhZ0N1cnNvciB9O1xuXHRcdFx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cblx0XHRcdCY6Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24sXG5cdFx0XHQmOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uIHtcblx0XHRcdFx0LXdlYmtpdC1hcHBlYXJhbmNlOiBub25lICFpbXBvcnRhbnQ7XG5cdFx0XHRcdG1hcmdpbjogMCAhaW1wb3J0YW50O1xuXHRcdFx0fVxuXHRcdGA7XG5cdH1cblxuXHRpZiAoIGlzRHJhZ2dpbmcgJiYgZHJhZ0N1cnNvciApIHtcblx0XHRhY3RpdmVEcmFnQ3Vyc29yU3R5bGVzID0gY3NzYFxuXHRcdFx0JjphY3RpdmUge1xuXHRcdFx0XHRjdXJzb3I6ICR7IGRyYWdDdXJzb3IgfTtcblx0XHRcdH1cblx0XHRgO1xuXHR9XG5cblx0cmV0dXJuIGNzc2Bcblx0XHQkeyBkZWZhdWx0QXJyb3dTdHlsZXMgfVxuXHRcdCR7IGFjdGl2ZURyYWdDdXJzb3JTdHlsZXMgfVxuXHRgO1xufTtcblxuLy8gVE9ETzogUmVzb2x2ZSBuZWVkIHRvIHVzZSAmJiYgdG8gaW5jcmVhc2Ugc3BlY2lmaWNpdHlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Xb3JkUHJlc3MvZ3V0ZW5iZXJnL2lzc3Vlcy8xODQ4M1xuXG5leHBvcnQgY29uc3QgSW5wdXQgPSBzdHlsZWQuaW5wdXQ8IElucHV0UHJvcHMgPmBcblx0JiYmIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdGJvcmRlcjogbm9uZTtcblx0XHRib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7XG5cdFx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA5MDAgXSB9O1xuXHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuXHRcdG1hcmdpbjogMDtcblx0XHRvdXRsaW5lOiBub25lO1xuXHRcdHdpZHRoOiAxMDAlO1xuXG5cdFx0JHsgZHJhZ1N0eWxlcyB9XG5cdFx0JHsgZGlzYWJsZWRTdHlsZXMgfVxuXHRcdCR7IGZvbnRTaXplU3R5bGVzIH1cblx0XHQkeyBzaXplU3R5bGVzIH1cblxuXHRcdCY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIge1xuXHRcdFx0bGluZS1oZWlnaHQ6IG5vcm1hbDtcblx0XHR9XG5cdH1cbmA7XG5cbmNvbnN0IGxhYmVsTWFyZ2luID0gKCB7XG5cdGxhYmVsUG9zaXRpb24sXG59OiB7XG5cdGxhYmVsUG9zaXRpb24/OiBMYWJlbFBvc2l0aW9uO1xufSApID0+IHtcblx0bGV0IG1hcmdpbkJvdHRvbSA9IDg7XG5cblx0aWYgKCBsYWJlbFBvc2l0aW9uID09PSAnZWRnZScgfHwgbGFiZWxQb3NpdGlvbiA9PT0gJ3NpZGUnICkge1xuXHRcdG1hcmdpbkJvdHRvbSA9IDA7XG5cdH1cblxuXHRyZXR1cm4gY3NzKCB7IG1hcmdpblRvcDogMCwgbWFyZ2luUmlnaHQ6IDAsIG1hcmdpbkJvdHRvbSwgbWFyZ2luTGVmdDogMCB9ICk7XG59O1xuXG5jb25zdCBCYXNlTGFiZWwgPSBzdHlsZWQoIFRleHQgKTwgeyBsYWJlbFBvc2l0aW9uPzogTGFiZWxQb3NpdGlvbiB9ID5gXG5cdCYmJiB7XG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRwYWRkaW5nLXRvcDogMDtcblx0XHRwYWRkaW5nLWJvdHRvbTogMDtcblx0XHRtYXgtd2lkdGg6IDEwMCU7XG5cdFx0ei1pbmRleDogMTtcblxuXHRcdCR7IGxhYmVsTWFyZ2luIH1cblx0XHRvdmVyZmxvdzogaGlkZGVuO1xuXHRcdHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuXHRcdHdoaXRlLXNwYWNlOiBub3dyYXA7XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBMYWJlbCA9IChcblx0cHJvcHM6IFdvcmRQcmVzc0NvbXBvbmVudFByb3BzPFxuXHRcdHsgbGFiZWxQb3NpdGlvbj86IExhYmVsUG9zaXRpb247IGNoaWxkcmVuOiBSZWFjdE5vZGUgfSxcblx0XHQnbGFiZWwnLFxuXHRcdGZhbHNlXG5cdD5cbikgPT4gPEJhc2VMYWJlbCB7IC4uLnByb3BzIH0gYXM9XCJsYWJlbFwiIC8+O1xuXG5leHBvcnQgY29uc3QgTGFiZWxXcmFwcGVyID0gc3R5bGVkKCBGbGV4SXRlbSApYFxuXHRtYXgtd2lkdGg6IGNhbGMoIDEwMCUgLSAxMHB4ICk7XG5gO1xuXG50eXBlIEJhY2tkcm9wUHJvcHMgPSB7XG5cdGRpc2FibGVkPzogYm9vbGVhbjtcblx0aXNGb2N1c2VkPzogYm9vbGVhbjtcbn07XG5cbmNvbnN0IGJhY2tkcm9wRm9jdXNlZFN0eWxlcyA9ICgge1xuXHRkaXNhYmxlZCxcblx0aXNGb2N1c2VkLFxufTogQmFja2Ryb3BQcm9wcyApOiBTZXJpYWxpemVkU3R5bGVzID0+IHtcblx0bGV0IGJvcmRlckNvbG9yID0gaXNGb2N1c2VkID8gQ09MT1JTLnVpLmJvcmRlckZvY3VzIDogQ09MT1JTLnVpLmJvcmRlcjtcblxuXHRsZXQgYm94U2hhZG93O1xuXG5cdGlmICggaXNGb2N1c2VkICkge1xuXHRcdGJveFNoYWRvdyA9IGAwIDAgMCAxcHggJHsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH0gaW5zZXRgO1xuXHR9XG5cblx0aWYgKCBkaXNhYmxlZCApIHtcblx0XHRib3JkZXJDb2xvciA9IENPTE9SUy51aS5ib3JkZXJEaXNhYmxlZDtcblx0fVxuXG5cdHJldHVybiBjc3MoIHtcblx0XHRib3hTaGFkb3csXG5cdFx0Ym9yZGVyQ29sb3IsXG5cdFx0Ym9yZGVyU3R5bGU6ICdzb2xpZCcsXG5cdFx0Ym9yZGVyV2lkdGg6IDEsXG5cdH0gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBCYWNrZHJvcFVJID0gc3R5bGVkLmRpdjwgQmFja2Ryb3BQcm9wcyA+YFxuXHQmJiYge1xuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0Ym9yZGVyLXJhZGl1czogaW5oZXJpdDtcblx0XHRib3R0b206IDA7XG5cdFx0bGVmdDogMDtcblx0XHRtYXJnaW46IDA7XG5cdFx0cGFkZGluZzogMDtcblx0XHRwb2ludGVyLWV2ZW50czogbm9uZTtcblx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdFx0cmlnaHQ6IDA7XG5cdFx0dG9wOiAwO1xuXG5cdFx0JHsgYmFja2Ryb3BGb2N1c2VkU3R5bGVzIH1cblx0XHQkeyBydGwoIHsgcGFkZGluZ0xlZnQ6IDIgfSApIH1cblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IFByZWZpeCA9IHN0eWxlZC5zcGFuYFxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRkaXNwbGF5OiBibG9jaztcbmA7XG5cbmV4cG9ydCBjb25zdCBTdWZmaXggPSBzdHlsZWQuc3BhbmBcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0YWxpZ24tc2VsZjogc3RyZXRjaDtcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0ZGlzcGxheTogZmxleDtcbmA7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

const rootLabelPositionStyles = _ref8 => {
  let {
    labelPosition
  } = _ref8;

  switch (labelPosition) {
    case 'top':
      return _ref5;

    case 'bottom':
      return _ref4;

    case 'edge':
      return _ref3;

    default:
      return '';
  }
};

export const Root = /*#__PURE__*/_styled(Flex, process.env.NODE_ENV === "production" ? {
  target: "em5sgkm7"
} : {
  target: "em5sgkm7",
  label: "Root"
})("position:relative;border-radius:2px;padding-top:0;", rootFocusedStyles, " ", rootLabelPositionStyles, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

const containerDisabledStyles = _ref9 => {
  let {
    disabled
  } = _ref9;
  const backgroundColor = disabled ? COLORS.ui.backgroundDisabled : COLORS.ui.background;
  return /*#__PURE__*/css({
    backgroundColor
  }, process.env.NODE_ENV === "production" ? "" : ";label:containerDisabledStyles;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
}; // Normalizes the margins from the <Flex /> (components/ui/flex/) container.


var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "wyxldh",
  styles: "margin:0 !important"
} : {
  name: "1vc2ltt-containerMarginStyles",
  styles: "margin:0 !important;label:containerMarginStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

const containerMarginStyles = _ref10 => {
  let {
    hideLabel
  } = _ref10;
  return hideLabel ? _ref2 : null;
};

var _ref = process.env.NODE_ENV === "production" ? {
  name: "1d3w5wq",
  styles: "width:100%"
} : {
  name: "uo2pd2-containerWidthStyles",
  styles: "width:100%;label:containerWidthStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

const containerWidthStyles = _ref11 => {
  let {
    __unstableInputWidth,
    labelPosition
  } = _ref11;
  if (!__unstableInputWidth) return _ref;
  if (labelPosition === 'side') return '';

  if (labelPosition === 'edge') {
    return /*#__PURE__*/css({
      flex: `0 0 ${__unstableInputWidth}`
    }, process.env.NODE_ENV === "production" ? "" : ";label:containerWidthStyles;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  }

  return /*#__PURE__*/css({
    width: __unstableInputWidth
  }, process.env.NODE_ENV === "production" ? "" : ";label:containerWidthStyles;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

export const Container = _styled("div", process.env.NODE_ENV === "production" ? {
  target: "em5sgkm6"
} : {
  target: "em5sgkm6",
  label: "Container"
})("align-items:center;box-sizing:border-box;border-radius:inherit;display:flex;flex:1;position:relative;", containerDisabledStyles, " ", containerMarginStyles, " ", containerWidthStyles, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

const disabledStyles = _ref12 => {
  let {
    disabled
  } = _ref12;
  if (!disabled) return '';
  return /*#__PURE__*/css({
    color: COLORS.ui.textDisabled
  }, process.env.NODE_ENV === "production" ? "" : ";label:disabledStyles;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

const fontSizeStyles = _ref13 => {
  let {
    inputSize: size
  } = _ref13;
  const sizes = {
    default: '13px',
    small: '11px',
    '__unstable-large': '13px'
  };
  const fontSize = sizes[size] || sizes.default;
  const fontSizeMobile = '16px';
  if (!fontSize) return '';
  return /*#__PURE__*/css("font-size:", fontSizeMobile, ";@media ( min-width: 600px ){font-size:", fontSize, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:fontSizeStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

const sizeStyles = _ref14 => {
  let {
    inputSize: size
  } = _ref14;
  const sizes = {
    default: {
      height: 30,
      lineHeight: 1,
      minHeight: 30,
      paddingLeft: 8,
      paddingRight: 8
    },
    small: {
      height: 24,
      lineHeight: 1,
      minHeight: 24,
      paddingLeft: 8,
      paddingRight: 8
    },
    '__unstable-large': {
      height: 40,
      lineHeight: 1,
      minHeight: 40,
      paddingLeft: 16,
      paddingRight: 16
    }
  };
  const style = sizes[size] || sizes.default;
  return /*#__PURE__*/css(style, process.env.NODE_ENV === "production" ? "" : ";label:sizeStyles;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

const dragStyles = _ref15 => {
  let {
    isDragging,
    dragCursor
  } = _ref15;
  let defaultArrowStyles;
  let activeDragCursorStyles;

  if (isDragging) {
    defaultArrowStyles = /*#__PURE__*/css("cursor:", dragCursor, ";user-select:none;&::-webkit-outer-spin-button,&::-webkit-inner-spin-button{-webkit-appearance:none!important;margin:0!important;}" + (process.env.NODE_ENV === "production" ? "" : ";label:defaultArrowStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  }

  if (isDragging && dragCursor) {
    activeDragCursorStyles = /*#__PURE__*/css("&:active{cursor:", dragCursor, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:activeDragCursorStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  }

  return /*#__PURE__*/css(defaultArrowStyles, " ", activeDragCursorStyles, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:dragStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
}; // TODO: Resolve need to use &&& to increase specificity
// https://github.com/WordPress/gutenberg/issues/18483


export const Input = _styled("input", process.env.NODE_ENV === "production" ? {
  target: "em5sgkm5"
} : {
  target: "em5sgkm5",
  label: "Input"
})("&&&{background-color:transparent;box-sizing:border-box;border:none;box-shadow:none!important;color:", COLORS.gray[900], ";display:block;font-family:inherit;margin:0;outline:none;width:100%;", dragStyles, " ", disabledStyles, " ", fontSizeStyles, " ", sizeStyles, " &::-webkit-input-placeholder{line-height:normal;}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

const labelMargin = _ref16 => {
  let {
    labelPosition
  } = _ref16;
  let marginBottom = 8;

  if (labelPosition === 'edge' || labelPosition === 'side') {
    marginBottom = 0;
  }

  return /*#__PURE__*/css({
    marginTop: 0,
    marginRight: 0,
    marginBottom,
    marginLeft: 0
  }, process.env.NODE_ENV === "production" ? "" : ";label:labelMargin;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvaW5wdXQtY29udHJvbC9zdHlsZXMvaW5wdXQtY29udHJvbC1zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlQUSIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2lucHV0LWNvbnRyb2wvc3R5bGVzL2lucHV0LWNvbnRyb2wtc3R5bGVzLnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGNzcywgU2VyaWFsaXplZFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB0eXBlIHsgQ1NTUHJvcGVydGllcywgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgdHlwZSB7IFdvcmRQcmVzc0NvbXBvbmVudFByb3BzIH0gZnJvbSAnLi4vLi4vdWkvY29udGV4dCc7XG5pbXBvcnQgeyBGbGV4LCBGbGV4SXRlbSB9IGZyb20gJy4uLy4uL2ZsZXgnO1xuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uL3RleHQnO1xuaW1wb3J0IHsgQ09MT1JTLCBydGwgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgdHlwZSB7IExhYmVsUG9zaXRpb24sIFNpemUgfSBmcm9tICcuLi90eXBlcyc7XG5cbnR5cGUgQ29udGFpbmVyUHJvcHMgPSB7XG5cdGRpc2FibGVkPzogYm9vbGVhbjtcblx0aGlkZUxhYmVsPzogYm9vbGVhbjtcblx0X191bnN0YWJsZUlucHV0V2lkdGg/OiBDU1NQcm9wZXJ0aWVzWyAnd2lkdGgnIF07XG5cdGxhYmVsUG9zaXRpb24/OiBMYWJlbFBvc2l0aW9uO1xufTtcblxudHlwZSBSb290UHJvcHMgPSB7XG5cdGlzRm9jdXNlZD86IGJvb2xlYW47XG5cdGxhYmVsUG9zaXRpb24/OiBMYWJlbFBvc2l0aW9uO1xufTtcblxuY29uc3Qgcm9vdEZvY3VzZWRTdHlsZXMgPSAoIHsgaXNGb2N1c2VkIH06IFJvb3RQcm9wcyApID0+IHtcblx0aWYgKCAhIGlzRm9jdXNlZCApIHJldHVybiAnJztcblxuXHRyZXR1cm4gY3NzKCB7IHpJbmRleDogMSB9ICk7XG59O1xuXG5jb25zdCByb290TGFiZWxQb3NpdGlvblN0eWxlcyA9ICggeyBsYWJlbFBvc2l0aW9uIH06IFJvb3RQcm9wcyApID0+IHtcblx0c3dpdGNoICggbGFiZWxQb3NpdGlvbiApIHtcblx0XHRjYXNlICd0b3AnOlxuXHRcdFx0cmV0dXJuIGNzc2Bcblx0XHRcdFx0YWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG5cdFx0XHRcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cdFx0XHRgO1xuXHRcdGNhc2UgJ2JvdHRvbSc6XG5cdFx0XHRyZXR1cm4gY3NzYFxuXHRcdFx0XHRhbGlnbi1pdGVtczogZmxleC1zdGFydDtcblx0XHRcdFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlO1xuXHRcdFx0YDtcblx0XHRjYXNlICdlZGdlJzpcblx0XHRcdHJldHVybiBjc3NgXG5cdFx0XHRcdGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcblx0XHRcdGA7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiAnJztcblx0fVxufTtcblxuZXhwb3J0IGNvbnN0IFJvb3QgPSBzdHlsZWQoIEZsZXggKTwgUm9vdFByb3BzID5gXG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0Ym9yZGVyLXJhZGl1czogMnB4O1xuXHRwYWRkaW5nLXRvcDogMDtcblx0JHsgcm9vdEZvY3VzZWRTdHlsZXMgfVxuXHQkeyByb290TGFiZWxQb3NpdGlvblN0eWxlcyB9XG5gO1xuXG5jb25zdCBjb250YWluZXJEaXNhYmxlZFN0eWxlcyA9ICggeyBkaXNhYmxlZCB9OiBDb250YWluZXJQcm9wcyApID0+IHtcblx0Y29uc3QgYmFja2dyb3VuZENvbG9yID0gZGlzYWJsZWRcblx0XHQ/IENPTE9SUy51aS5iYWNrZ3JvdW5kRGlzYWJsZWRcblx0XHQ6IENPTE9SUy51aS5iYWNrZ3JvdW5kO1xuXG5cdHJldHVybiBjc3MoIHsgYmFja2dyb3VuZENvbG9yIH0gKTtcbn07XG5cbi8vIE5vcm1hbGl6ZXMgdGhlIG1hcmdpbnMgZnJvbSB0aGUgPEZsZXggLz4gKGNvbXBvbmVudHMvdWkvZmxleC8pIGNvbnRhaW5lci5cbmNvbnN0IGNvbnRhaW5lck1hcmdpblN0eWxlcyA9ICggeyBoaWRlTGFiZWwgfTogQ29udGFpbmVyUHJvcHMgKSA9PiB7XG5cdHJldHVybiBoaWRlTGFiZWwgPyBjc3MoIHsgbWFyZ2luOiAnMCAhaW1wb3J0YW50JyB9ICkgOiBudWxsO1xufTtcblxuY29uc3QgY29udGFpbmVyV2lkdGhTdHlsZXMgPSAoIHtcblx0X191bnN0YWJsZUlucHV0V2lkdGgsXG5cdGxhYmVsUG9zaXRpb24sXG59OiBDb250YWluZXJQcm9wcyApID0+IHtcblx0aWYgKCAhIF9fdW5zdGFibGVJbnB1dFdpZHRoICkgcmV0dXJuIGNzcyggeyB3aWR0aDogJzEwMCUnIH0gKTtcblxuXHRpZiAoIGxhYmVsUG9zaXRpb24gPT09ICdzaWRlJyApIHJldHVybiAnJztcblxuXHRpZiAoIGxhYmVsUG9zaXRpb24gPT09ICdlZGdlJyApIHtcblx0XHRyZXR1cm4gY3NzKCB7XG5cdFx0XHRmbGV4OiBgMCAwICR7IF9fdW5zdGFibGVJbnB1dFdpZHRoIH1gLFxuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiBjc3MoIHsgd2lkdGg6IF9fdW5zdGFibGVJbnB1dFdpZHRoIH0gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBDb250YWluZXIgPSBzdHlsZWQuZGl2PCBDb250YWluZXJQcm9wcyA+YFxuXHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRib3JkZXItcmFkaXVzOiBpbmhlcml0O1xuXHRkaXNwbGF5OiBmbGV4O1xuXHRmbGV4OiAxO1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cblx0JHsgY29udGFpbmVyRGlzYWJsZWRTdHlsZXMgfVxuXHQkeyBjb250YWluZXJNYXJnaW5TdHlsZXMgfVxuXHQkeyBjb250YWluZXJXaWR0aFN0eWxlcyB9XG5gO1xuXG50eXBlIElucHV0UHJvcHMgPSB7XG5cdGRpc2FibGVkPzogYm9vbGVhbjtcblx0aW5wdXRTaXplPzogU2l6ZTtcblx0aXNEcmFnZ2luZz86IGJvb2xlYW47XG5cdGRyYWdDdXJzb3I/OiBDU1NQcm9wZXJ0aWVzWyAnY3Vyc29yJyBdO1xufTtcblxuY29uc3QgZGlzYWJsZWRTdHlsZXMgPSAoIHsgZGlzYWJsZWQgfTogSW5wdXRQcm9wcyApID0+IHtcblx0aWYgKCAhIGRpc2FibGVkICkgcmV0dXJuICcnO1xuXG5cdHJldHVybiBjc3MoIHtcblx0XHRjb2xvcjogQ09MT1JTLnVpLnRleHREaXNhYmxlZCxcblx0fSApO1xufTtcblxuY29uc3QgZm9udFNpemVTdHlsZXMgPSAoIHsgaW5wdXRTaXplOiBzaXplIH06IElucHV0UHJvcHMgKSA9PiB7XG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdGRlZmF1bHQ6ICcxM3B4Jyxcblx0XHRzbWFsbDogJzExcHgnLFxuXHRcdCdfX3Vuc3RhYmxlLWxhcmdlJzogJzEzcHgnLFxuXHR9O1xuXG5cdGNvbnN0IGZvbnRTaXplID0gc2l6ZXNbIHNpemUgYXMgU2l6ZSBdIHx8IHNpemVzLmRlZmF1bHQ7XG5cdGNvbnN0IGZvbnRTaXplTW9iaWxlID0gJzE2cHgnO1xuXG5cdGlmICggISBmb250U2l6ZSApIHJldHVybiAnJztcblxuXHRyZXR1cm4gY3NzYFxuXHRcdGZvbnQtc2l6ZTogJHsgZm9udFNpemVNb2JpbGUgfTtcblxuXHRcdEBtZWRpYSAoIG1pbi13aWR0aDogNjAwcHggKSB7XG5cdFx0XHRmb250LXNpemU6ICR7IGZvbnRTaXplIH07XG5cdFx0fVxuXHRgO1xufTtcblxuY29uc3Qgc2l6ZVN0eWxlcyA9ICggeyBpbnB1dFNpemU6IHNpemUgfTogSW5wdXRQcm9wcyApID0+IHtcblx0Y29uc3Qgc2l6ZXMgPSB7XG5cdFx0ZGVmYXVsdDoge1xuXHRcdFx0aGVpZ2h0OiAzMCxcblx0XHRcdGxpbmVIZWlnaHQ6IDEsXG5cdFx0XHRtaW5IZWlnaHQ6IDMwLFxuXHRcdFx0cGFkZGluZ0xlZnQ6IDgsXG5cdFx0XHRwYWRkaW5nUmlnaHQ6IDgsXG5cdFx0fSxcblx0XHRzbWFsbDoge1xuXHRcdFx0aGVpZ2h0OiAyNCxcblx0XHRcdGxpbmVIZWlnaHQ6IDEsXG5cdFx0XHRtaW5IZWlnaHQ6IDI0LFxuXHRcdFx0cGFkZGluZ0xlZnQ6IDgsXG5cdFx0XHRwYWRkaW5nUmlnaHQ6IDgsXG5cdFx0fSxcblx0XHQnX191bnN0YWJsZS1sYXJnZSc6IHtcblx0XHRcdGhlaWdodDogNDAsXG5cdFx0XHRsaW5lSGVpZ2h0OiAxLFxuXHRcdFx0bWluSGVpZ2h0OiA0MCxcblx0XHRcdHBhZGRpbmdMZWZ0OiAxNixcblx0XHRcdHBhZGRpbmdSaWdodDogMTYsXG5cdFx0fSxcblx0fTtcblxuXHRjb25zdCBzdHlsZSA9IHNpemVzWyBzaXplIGFzIFNpemUgXSB8fCBzaXplcy5kZWZhdWx0O1xuXG5cdHJldHVybiBjc3MoIHN0eWxlICk7XG59O1xuXG5jb25zdCBkcmFnU3R5bGVzID0gKCB7IGlzRHJhZ2dpbmcsIGRyYWdDdXJzb3IgfTogSW5wdXRQcm9wcyApID0+IHtcblx0bGV0IGRlZmF1bHRBcnJvd1N0eWxlczogU2VyaWFsaXplZFN0eWxlcyB8IHVuZGVmaW5lZDtcblx0bGV0IGFjdGl2ZURyYWdDdXJzb3JTdHlsZXM6IFNlcmlhbGl6ZWRTdHlsZXMgfCB1bmRlZmluZWQ7XG5cblx0aWYgKCBpc0RyYWdnaW5nICkge1xuXHRcdGRlZmF1bHRBcnJvd1N0eWxlcyA9IGNzc2Bcblx0XHRcdGN1cnNvcjogJHsgZHJhZ0N1cnNvciB9O1xuXHRcdFx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cblx0XHRcdCY6Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24sXG5cdFx0XHQmOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uIHtcblx0XHRcdFx0LXdlYmtpdC1hcHBlYXJhbmNlOiBub25lICFpbXBvcnRhbnQ7XG5cdFx0XHRcdG1hcmdpbjogMCAhaW1wb3J0YW50O1xuXHRcdFx0fVxuXHRcdGA7XG5cdH1cblxuXHRpZiAoIGlzRHJhZ2dpbmcgJiYgZHJhZ0N1cnNvciApIHtcblx0XHRhY3RpdmVEcmFnQ3Vyc29yU3R5bGVzID0gY3NzYFxuXHRcdFx0JjphY3RpdmUge1xuXHRcdFx0XHRjdXJzb3I6ICR7IGRyYWdDdXJzb3IgfTtcblx0XHRcdH1cblx0XHRgO1xuXHR9XG5cblx0cmV0dXJuIGNzc2Bcblx0XHQkeyBkZWZhdWx0QXJyb3dTdHlsZXMgfVxuXHRcdCR7IGFjdGl2ZURyYWdDdXJzb3JTdHlsZXMgfVxuXHRgO1xufTtcblxuLy8gVE9ETzogUmVzb2x2ZSBuZWVkIHRvIHVzZSAmJiYgdG8gaW5jcmVhc2Ugc3BlY2lmaWNpdHlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Xb3JkUHJlc3MvZ3V0ZW5iZXJnL2lzc3Vlcy8xODQ4M1xuXG5leHBvcnQgY29uc3QgSW5wdXQgPSBzdHlsZWQuaW5wdXQ8IElucHV0UHJvcHMgPmBcblx0JiYmIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdGJvcmRlcjogbm9uZTtcblx0XHRib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7XG5cdFx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA5MDAgXSB9O1xuXHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuXHRcdG1hcmdpbjogMDtcblx0XHRvdXRsaW5lOiBub25lO1xuXHRcdHdpZHRoOiAxMDAlO1xuXG5cdFx0JHsgZHJhZ1N0eWxlcyB9XG5cdFx0JHsgZGlzYWJsZWRTdHlsZXMgfVxuXHRcdCR7IGZvbnRTaXplU3R5bGVzIH1cblx0XHQkeyBzaXplU3R5bGVzIH1cblxuXHRcdCY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIge1xuXHRcdFx0bGluZS1oZWlnaHQ6IG5vcm1hbDtcblx0XHR9XG5cdH1cbmA7XG5cbmNvbnN0IGxhYmVsTWFyZ2luID0gKCB7XG5cdGxhYmVsUG9zaXRpb24sXG59OiB7XG5cdGxhYmVsUG9zaXRpb24/OiBMYWJlbFBvc2l0aW9uO1xufSApID0+IHtcblx0bGV0IG1hcmdpbkJvdHRvbSA9IDg7XG5cblx0aWYgKCBsYWJlbFBvc2l0aW9uID09PSAnZWRnZScgfHwgbGFiZWxQb3NpdGlvbiA9PT0gJ3NpZGUnICkge1xuXHRcdG1hcmdpbkJvdHRvbSA9IDA7XG5cdH1cblxuXHRyZXR1cm4gY3NzKCB7IG1hcmdpblRvcDogMCwgbWFyZ2luUmlnaHQ6IDAsIG1hcmdpbkJvdHRvbSwgbWFyZ2luTGVmdDogMCB9ICk7XG59O1xuXG5jb25zdCBCYXNlTGFiZWwgPSBzdHlsZWQoIFRleHQgKTwgeyBsYWJlbFBvc2l0aW9uPzogTGFiZWxQb3NpdGlvbiB9ID5gXG5cdCYmJiB7XG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRwYWRkaW5nLXRvcDogMDtcblx0XHRwYWRkaW5nLWJvdHRvbTogMDtcblx0XHRtYXgtd2lkdGg6IDEwMCU7XG5cdFx0ei1pbmRleDogMTtcblxuXHRcdCR7IGxhYmVsTWFyZ2luIH1cblx0XHRvdmVyZmxvdzogaGlkZGVuO1xuXHRcdHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuXHRcdHdoaXRlLXNwYWNlOiBub3dyYXA7XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBMYWJlbCA9IChcblx0cHJvcHM6IFdvcmRQcmVzc0NvbXBvbmVudFByb3BzPFxuXHRcdHsgbGFiZWxQb3NpdGlvbj86IExhYmVsUG9zaXRpb247IGNoaWxkcmVuOiBSZWFjdE5vZGUgfSxcblx0XHQnbGFiZWwnLFxuXHRcdGZhbHNlXG5cdD5cbikgPT4gPEJhc2VMYWJlbCB7IC4uLnByb3BzIH0gYXM9XCJsYWJlbFwiIC8+O1xuXG5leHBvcnQgY29uc3QgTGFiZWxXcmFwcGVyID0gc3R5bGVkKCBGbGV4SXRlbSApYFxuXHRtYXgtd2lkdGg6IGNhbGMoIDEwMCUgLSAxMHB4ICk7XG5gO1xuXG50eXBlIEJhY2tkcm9wUHJvcHMgPSB7XG5cdGRpc2FibGVkPzogYm9vbGVhbjtcblx0aXNGb2N1c2VkPzogYm9vbGVhbjtcbn07XG5cbmNvbnN0IGJhY2tkcm9wRm9jdXNlZFN0eWxlcyA9ICgge1xuXHRkaXNhYmxlZCxcblx0aXNGb2N1c2VkLFxufTogQmFja2Ryb3BQcm9wcyApOiBTZXJpYWxpemVkU3R5bGVzID0+IHtcblx0bGV0IGJvcmRlckNvbG9yID0gaXNGb2N1c2VkID8gQ09MT1JTLnVpLmJvcmRlckZvY3VzIDogQ09MT1JTLnVpLmJvcmRlcjtcblxuXHRsZXQgYm94U2hhZG93O1xuXG5cdGlmICggaXNGb2N1c2VkICkge1xuXHRcdGJveFNoYWRvdyA9IGAwIDAgMCAxcHggJHsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH0gaW5zZXRgO1xuXHR9XG5cblx0aWYgKCBkaXNhYmxlZCApIHtcblx0XHRib3JkZXJDb2xvciA9IENPTE9SUy51aS5ib3JkZXJEaXNhYmxlZDtcblx0fVxuXG5cdHJldHVybiBjc3MoIHtcblx0XHRib3hTaGFkb3csXG5cdFx0Ym9yZGVyQ29sb3IsXG5cdFx0Ym9yZGVyU3R5bGU6ICdzb2xpZCcsXG5cdFx0Ym9yZGVyV2lkdGg6IDEsXG5cdH0gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBCYWNrZHJvcFVJID0gc3R5bGVkLmRpdjwgQmFja2Ryb3BQcm9wcyA+YFxuXHQmJiYge1xuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0Ym9yZGVyLXJhZGl1czogaW5oZXJpdDtcblx0XHRib3R0b206IDA7XG5cdFx0bGVmdDogMDtcblx0XHRtYXJnaW46IDA7XG5cdFx0cGFkZGluZzogMDtcblx0XHRwb2ludGVyLWV2ZW50czogbm9uZTtcblx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdFx0cmlnaHQ6IDA7XG5cdFx0dG9wOiAwO1xuXG5cdFx0JHsgYmFja2Ryb3BGb2N1c2VkU3R5bGVzIH1cblx0XHQkeyBydGwoIHsgcGFkZGluZ0xlZnQ6IDIgfSApIH1cblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IFByZWZpeCA9IHN0eWxlZC5zcGFuYFxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRkaXNwbGF5OiBibG9jaztcbmA7XG5cbmV4cG9ydCBjb25zdCBTdWZmaXggPSBzdHlsZWQuc3BhbmBcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0YWxpZ24tc2VsZjogc3RyZXRjaDtcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0ZGlzcGxheTogZmxleDtcbmA7XG4iXX0= */");
};

const BaseLabel = /*#__PURE__*/_styled(Text, process.env.NODE_ENV === "production" ? {
  target: "em5sgkm4"
} : {
  target: "em5sgkm4",
  label: "BaseLabel"
})("&&&{box-sizing:border-box;display:block;padding-top:0;padding-bottom:0;max-width:100%;z-index:1;", labelMargin, " overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

export const Label = props => createElement(BaseLabel, _extends({}, props, {
  as: "label"
}));
export const LabelWrapper = /*#__PURE__*/_styled(FlexItem, process.env.NODE_ENV === "production" ? {
  target: "em5sgkm3"
} : {
  target: "em5sgkm3",
  label: "LabelWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "1b6uupn",
  styles: "max-width:calc( 100% - 10px )"
} : {
  name: "1b6uupn",
  styles: "max-width:calc( 100% - 10px )",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

const backdropFocusedStyles = _ref17 => {
  let {
    disabled,
    isFocused
  } = _ref17;
  let borderColor = isFocused ? COLORS.ui.borderFocus : COLORS.ui.border;
  let boxShadow;

  if (isFocused) {
    boxShadow = `0 0 0 1px ${COLORS.ui.borderFocus} inset`;
  }

  if (disabled) {
    borderColor = COLORS.ui.borderDisabled;
  }

  return /*#__PURE__*/css({
    boxShadow,
    borderColor,
    borderStyle: 'solid',
    borderWidth: 1
  }, process.env.NODE_ENV === "production" ? "" : ";label:backdropFocusedStyles;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

export const BackdropUI = _styled("div", process.env.NODE_ENV === "production" ? {
  target: "em5sgkm2"
} : {
  target: "em5sgkm2",
  label: "BackdropUI"
})("&&&{box-sizing:border-box;border-radius:inherit;bottom:0;left:0;margin:0;padding:0;pointer-events:none;position:absolute;right:0;top:0;", backdropFocusedStyles, " ", rtl({
  paddingLeft: 2
}), ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvaW5wdXQtY29udHJvbC9zdHlsZXMvaW5wdXQtY29udHJvbC1zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZTcUQiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9pbnB1dC1jb250cm9sL3N0eWxlcy9pbnB1dC1jb250cm9sLXN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MsIFNlcmlhbGl6ZWRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgdHlwZSB7IENTU1Byb3BlcnRpZXMsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHR5cGUgeyBXb3JkUHJlc3NDb21wb25lbnRQcm9wcyB9IGZyb20gJy4uLy4uL3VpL2NvbnRleHQnO1xuaW1wb3J0IHsgRmxleCwgRmxleEl0ZW0gfSBmcm9tICcuLi8uLi9mbGV4JztcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi8uLi90ZXh0JztcbmltcG9ydCB7IENPTE9SUywgcnRsIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IHR5cGUgeyBMYWJlbFBvc2l0aW9uLCBTaXplIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG50eXBlIENvbnRhaW5lclByb3BzID0ge1xuXHRkaXNhYmxlZD86IGJvb2xlYW47XG5cdGhpZGVMYWJlbD86IGJvb2xlYW47XG5cdF9fdW5zdGFibGVJbnB1dFdpZHRoPzogQ1NTUHJvcGVydGllc1sgJ3dpZHRoJyBdO1xuXHRsYWJlbFBvc2l0aW9uPzogTGFiZWxQb3NpdGlvbjtcbn07XG5cbnR5cGUgUm9vdFByb3BzID0ge1xuXHRpc0ZvY3VzZWQ/OiBib29sZWFuO1xuXHRsYWJlbFBvc2l0aW9uPzogTGFiZWxQb3NpdGlvbjtcbn07XG5cbmNvbnN0IHJvb3RGb2N1c2VkU3R5bGVzID0gKCB7IGlzRm9jdXNlZCB9OiBSb290UHJvcHMgKSA9PiB7XG5cdGlmICggISBpc0ZvY3VzZWQgKSByZXR1cm4gJyc7XG5cblx0cmV0dXJuIGNzcyggeyB6SW5kZXg6IDEgfSApO1xufTtcblxuY29uc3Qgcm9vdExhYmVsUG9zaXRpb25TdHlsZXMgPSAoIHsgbGFiZWxQb3NpdGlvbiB9OiBSb290UHJvcHMgKSA9PiB7XG5cdHN3aXRjaCAoIGxhYmVsUG9zaXRpb24gKSB7XG5cdFx0Y2FzZSAndG9wJzpcblx0XHRcdHJldHVybiBjc3NgXG5cdFx0XHRcdGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuXHRcdFx0XHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRcdFx0YDtcblx0XHRjYXNlICdib3R0b20nOlxuXHRcdFx0cmV0dXJuIGNzc2Bcblx0XHRcdFx0YWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG5cdFx0XHRcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZTtcblx0XHRcdGA7XG5cdFx0Y2FzZSAnZWRnZSc6XG5cdFx0XHRyZXR1cm4gY3NzYFxuXHRcdFx0XHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cdFx0XHRgO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gJyc7XG5cdH1cbn07XG5cbmV4cG9ydCBjb25zdCBSb290ID0gc3R5bGVkKCBGbGV4ICk8IFJvb3RQcm9wcyA+YFxuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdGJvcmRlci1yYWRpdXM6IDJweDtcblx0cGFkZGluZy10b3A6IDA7XG5cdCR7IHJvb3RGb2N1c2VkU3R5bGVzIH1cblx0JHsgcm9vdExhYmVsUG9zaXRpb25TdHlsZXMgfVxuYDtcblxuY29uc3QgY29udGFpbmVyRGlzYWJsZWRTdHlsZXMgPSAoIHsgZGlzYWJsZWQgfTogQ29udGFpbmVyUHJvcHMgKSA9PiB7XG5cdGNvbnN0IGJhY2tncm91bmRDb2xvciA9IGRpc2FibGVkXG5cdFx0PyBDT0xPUlMudWkuYmFja2dyb3VuZERpc2FibGVkXG5cdFx0OiBDT0xPUlMudWkuYmFja2dyb3VuZDtcblxuXHRyZXR1cm4gY3NzKCB7IGJhY2tncm91bmRDb2xvciB9ICk7XG59O1xuXG4vLyBOb3JtYWxpemVzIHRoZSBtYXJnaW5zIGZyb20gdGhlIDxGbGV4IC8+IChjb21wb25lbnRzL3VpL2ZsZXgvKSBjb250YWluZXIuXG5jb25zdCBjb250YWluZXJNYXJnaW5TdHlsZXMgPSAoIHsgaGlkZUxhYmVsIH06IENvbnRhaW5lclByb3BzICkgPT4ge1xuXHRyZXR1cm4gaGlkZUxhYmVsID8gY3NzKCB7IG1hcmdpbjogJzAgIWltcG9ydGFudCcgfSApIDogbnVsbDtcbn07XG5cbmNvbnN0IGNvbnRhaW5lcldpZHRoU3R5bGVzID0gKCB7XG5cdF9fdW5zdGFibGVJbnB1dFdpZHRoLFxuXHRsYWJlbFBvc2l0aW9uLFxufTogQ29udGFpbmVyUHJvcHMgKSA9PiB7XG5cdGlmICggISBfX3Vuc3RhYmxlSW5wdXRXaWR0aCApIHJldHVybiBjc3MoIHsgd2lkdGg6ICcxMDAlJyB9ICk7XG5cblx0aWYgKCBsYWJlbFBvc2l0aW9uID09PSAnc2lkZScgKSByZXR1cm4gJyc7XG5cblx0aWYgKCBsYWJlbFBvc2l0aW9uID09PSAnZWRnZScgKSB7XG5cdFx0cmV0dXJuIGNzcygge1xuXHRcdFx0ZmxleDogYDAgMCAkeyBfX3Vuc3RhYmxlSW5wdXRXaWR0aCB9YCxcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gY3NzKCB7IHdpZHRoOiBfX3Vuc3RhYmxlSW5wdXRXaWR0aCB9ICk7XG59O1xuXG5leHBvcnQgY29uc3QgQ29udGFpbmVyID0gc3R5bGVkLmRpdjwgQ29udGFpbmVyUHJvcHMgPmBcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0Ym9yZGVyLXJhZGl1czogaW5oZXJpdDtcblx0ZGlzcGxheTogZmxleDtcblx0ZmxleDogMTtcblx0cG9zaXRpb246IHJlbGF0aXZlO1xuXG5cdCR7IGNvbnRhaW5lckRpc2FibGVkU3R5bGVzIH1cblx0JHsgY29udGFpbmVyTWFyZ2luU3R5bGVzIH1cblx0JHsgY29udGFpbmVyV2lkdGhTdHlsZXMgfVxuYDtcblxudHlwZSBJbnB1dFByb3BzID0ge1xuXHRkaXNhYmxlZD86IGJvb2xlYW47XG5cdGlucHV0U2l6ZT86IFNpemU7XG5cdGlzRHJhZ2dpbmc/OiBib29sZWFuO1xuXHRkcmFnQ3Vyc29yPzogQ1NTUHJvcGVydGllc1sgJ2N1cnNvcicgXTtcbn07XG5cbmNvbnN0IGRpc2FibGVkU3R5bGVzID0gKCB7IGRpc2FibGVkIH06IElucHV0UHJvcHMgKSA9PiB7XG5cdGlmICggISBkaXNhYmxlZCApIHJldHVybiAnJztcblxuXHRyZXR1cm4gY3NzKCB7XG5cdFx0Y29sb3I6IENPTE9SUy51aS50ZXh0RGlzYWJsZWQsXG5cdH0gKTtcbn07XG5cbmNvbnN0IGZvbnRTaXplU3R5bGVzID0gKCB7IGlucHV0U2l6ZTogc2l6ZSB9OiBJbnB1dFByb3BzICkgPT4ge1xuXHRjb25zdCBzaXplcyA9IHtcblx0XHRkZWZhdWx0OiAnMTNweCcsXG5cdFx0c21hbGw6ICcxMXB4Jyxcblx0XHQnX191bnN0YWJsZS1sYXJnZSc6ICcxM3B4Jyxcblx0fTtcblxuXHRjb25zdCBmb250U2l6ZSA9IHNpemVzWyBzaXplIGFzIFNpemUgXSB8fCBzaXplcy5kZWZhdWx0O1xuXHRjb25zdCBmb250U2l6ZU1vYmlsZSA9ICcxNnB4JztcblxuXHRpZiAoICEgZm9udFNpemUgKSByZXR1cm4gJyc7XG5cblx0cmV0dXJuIGNzc2Bcblx0XHRmb250LXNpemU6ICR7IGZvbnRTaXplTW9iaWxlIH07XG5cblx0XHRAbWVkaWEgKCBtaW4td2lkdGg6IDYwMHB4ICkge1xuXHRcdFx0Zm9udC1zaXplOiAkeyBmb250U2l6ZSB9O1xuXHRcdH1cblx0YDtcbn07XG5cbmNvbnN0IHNpemVTdHlsZXMgPSAoIHsgaW5wdXRTaXplOiBzaXplIH06IElucHV0UHJvcHMgKSA9PiB7XG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdGRlZmF1bHQ6IHtcblx0XHRcdGhlaWdodDogMzAsXG5cdFx0XHRsaW5lSGVpZ2h0OiAxLFxuXHRcdFx0bWluSGVpZ2h0OiAzMCxcblx0XHRcdHBhZGRpbmdMZWZ0OiA4LFxuXHRcdFx0cGFkZGluZ1JpZ2h0OiA4LFxuXHRcdH0sXG5cdFx0c21hbGw6IHtcblx0XHRcdGhlaWdodDogMjQsXG5cdFx0XHRsaW5lSGVpZ2h0OiAxLFxuXHRcdFx0bWluSGVpZ2h0OiAyNCxcblx0XHRcdHBhZGRpbmdMZWZ0OiA4LFxuXHRcdFx0cGFkZGluZ1JpZ2h0OiA4LFxuXHRcdH0sXG5cdFx0J19fdW5zdGFibGUtbGFyZ2UnOiB7XG5cdFx0XHRoZWlnaHQ6IDQwLFxuXHRcdFx0bGluZUhlaWdodDogMSxcblx0XHRcdG1pbkhlaWdodDogNDAsXG5cdFx0XHRwYWRkaW5nTGVmdDogMTYsXG5cdFx0XHRwYWRkaW5nUmlnaHQ6IDE2LFxuXHRcdH0sXG5cdH07XG5cblx0Y29uc3Qgc3R5bGUgPSBzaXplc1sgc2l6ZSBhcyBTaXplIF0gfHwgc2l6ZXMuZGVmYXVsdDtcblxuXHRyZXR1cm4gY3NzKCBzdHlsZSApO1xufTtcblxuY29uc3QgZHJhZ1N0eWxlcyA9ICggeyBpc0RyYWdnaW5nLCBkcmFnQ3Vyc29yIH06IElucHV0UHJvcHMgKSA9PiB7XG5cdGxldCBkZWZhdWx0QXJyb3dTdHlsZXM6IFNlcmlhbGl6ZWRTdHlsZXMgfCB1bmRlZmluZWQ7XG5cdGxldCBhY3RpdmVEcmFnQ3Vyc29yU3R5bGVzOiBTZXJpYWxpemVkU3R5bGVzIHwgdW5kZWZpbmVkO1xuXG5cdGlmICggaXNEcmFnZ2luZyApIHtcblx0XHRkZWZhdWx0QXJyb3dTdHlsZXMgPSBjc3NgXG5cdFx0XHRjdXJzb3I6ICR7IGRyYWdDdXJzb3IgfTtcblx0XHRcdHVzZXItc2VsZWN0OiBub25lO1xuXG5cdFx0XHQmOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uLFxuXHRcdFx0Jjo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbiB7XG5cdFx0XHRcdC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZSAhaW1wb3J0YW50O1xuXHRcdFx0XHRtYXJnaW46IDAgIWltcG9ydGFudDtcblx0XHRcdH1cblx0XHRgO1xuXHR9XG5cblx0aWYgKCBpc0RyYWdnaW5nICYmIGRyYWdDdXJzb3IgKSB7XG5cdFx0YWN0aXZlRHJhZ0N1cnNvclN0eWxlcyA9IGNzc2Bcblx0XHRcdCY6YWN0aXZlIHtcblx0XHRcdFx0Y3Vyc29yOiAkeyBkcmFnQ3Vyc29yIH07XG5cdFx0XHR9XG5cdFx0YDtcblx0fVxuXG5cdHJldHVybiBjc3NgXG5cdFx0JHsgZGVmYXVsdEFycm93U3R5bGVzIH1cblx0XHQkeyBhY3RpdmVEcmFnQ3Vyc29yU3R5bGVzIH1cblx0YDtcbn07XG5cbi8vIFRPRE86IFJlc29sdmUgbmVlZCB0byB1c2UgJiYmIHRvIGluY3JlYXNlIHNwZWNpZmljaXR5XG4vLyBodHRwczovL2dpdGh1Yi5jb20vV29yZFByZXNzL2d1dGVuYmVyZy9pc3N1ZXMvMTg0ODNcblxuZXhwb3J0IGNvbnN0IElucHV0ID0gc3R5bGVkLmlucHV0PCBJbnB1dFByb3BzID5gXG5cdCYmJiB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRib3JkZXI6IG5vbmU7XG5cdFx0Ym94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50O1xuXHRcdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgOTAwIF0gfTtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRmb250LWZhbWlseTogaW5oZXJpdDtcblx0XHRtYXJnaW46IDA7XG5cdFx0b3V0bGluZTogbm9uZTtcblx0XHR3aWR0aDogMTAwJTtcblxuXHRcdCR7IGRyYWdTdHlsZXMgfVxuXHRcdCR7IGRpc2FibGVkU3R5bGVzIH1cblx0XHQkeyBmb250U2l6ZVN0eWxlcyB9XG5cdFx0JHsgc2l6ZVN0eWxlcyB9XG5cblx0XHQmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyIHtcblx0XHRcdGxpbmUtaGVpZ2h0OiBub3JtYWw7XG5cdFx0fVxuXHR9XG5gO1xuXG5jb25zdCBsYWJlbE1hcmdpbiA9ICgge1xuXHRsYWJlbFBvc2l0aW9uLFxufToge1xuXHRsYWJlbFBvc2l0aW9uPzogTGFiZWxQb3NpdGlvbjtcbn0gKSA9PiB7XG5cdGxldCBtYXJnaW5Cb3R0b20gPSA4O1xuXG5cdGlmICggbGFiZWxQb3NpdGlvbiA9PT0gJ2VkZ2UnIHx8IGxhYmVsUG9zaXRpb24gPT09ICdzaWRlJyApIHtcblx0XHRtYXJnaW5Cb3R0b20gPSAwO1xuXHR9XG5cblx0cmV0dXJuIGNzcyggeyBtYXJnaW5Ub3A6IDAsIG1hcmdpblJpZ2h0OiAwLCBtYXJnaW5Cb3R0b20sIG1hcmdpbkxlZnQ6IDAgfSApO1xufTtcblxuY29uc3QgQmFzZUxhYmVsID0gc3R5bGVkKCBUZXh0ICk8IHsgbGFiZWxQb3NpdGlvbj86IExhYmVsUG9zaXRpb24gfSA+YFxuXHQmJiYge1xuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0cGFkZGluZy10b3A6IDA7XG5cdFx0cGFkZGluZy1ib3R0b206IDA7XG5cdFx0bWF4LXdpZHRoOiAxMDAlO1xuXHRcdHotaW5kZXg6IDE7XG5cblx0XHQkeyBsYWJlbE1hcmdpbiB9XG5cdFx0b3ZlcmZsb3c6IGhpZGRlbjtcblx0XHR0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcblx0XHR3aGl0ZS1zcGFjZTogbm93cmFwO1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgTGFiZWwgPSAoXG5cdHByb3BzOiBXb3JkUHJlc3NDb21wb25lbnRQcm9wczxcblx0XHR7IGxhYmVsUG9zaXRpb24/OiBMYWJlbFBvc2l0aW9uOyBjaGlsZHJlbjogUmVhY3ROb2RlIH0sXG5cdFx0J2xhYmVsJyxcblx0XHRmYWxzZVxuXHQ+XG4pID0+IDxCYXNlTGFiZWwgeyAuLi5wcm9wcyB9IGFzPVwibGFiZWxcIiAvPjtcblxuZXhwb3J0IGNvbnN0IExhYmVsV3JhcHBlciA9IHN0eWxlZCggRmxleEl0ZW0gKWBcblx0bWF4LXdpZHRoOiBjYWxjKCAxMDAlIC0gMTBweCApO1xuYDtcblxudHlwZSBCYWNrZHJvcFByb3BzID0ge1xuXHRkaXNhYmxlZD86IGJvb2xlYW47XG5cdGlzRm9jdXNlZD86IGJvb2xlYW47XG59O1xuXG5jb25zdCBiYWNrZHJvcEZvY3VzZWRTdHlsZXMgPSAoIHtcblx0ZGlzYWJsZWQsXG5cdGlzRm9jdXNlZCxcbn06IEJhY2tkcm9wUHJvcHMgKTogU2VyaWFsaXplZFN0eWxlcyA9PiB7XG5cdGxldCBib3JkZXJDb2xvciA9IGlzRm9jdXNlZCA/IENPTE9SUy51aS5ib3JkZXJGb2N1cyA6IENPTE9SUy51aS5ib3JkZXI7XG5cblx0bGV0IGJveFNoYWRvdztcblxuXHRpZiAoIGlzRm9jdXNlZCApIHtcblx0XHRib3hTaGFkb3cgPSBgMCAwIDAgMXB4ICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9IGluc2V0YDtcblx0fVxuXG5cdGlmICggZGlzYWJsZWQgKSB7XG5cdFx0Ym9yZGVyQ29sb3IgPSBDT0xPUlMudWkuYm9yZGVyRGlzYWJsZWQ7XG5cdH1cblxuXHRyZXR1cm4gY3NzKCB7XG5cdFx0Ym94U2hhZG93LFxuXHRcdGJvcmRlckNvbG9yLFxuXHRcdGJvcmRlclN0eWxlOiAnc29saWQnLFxuXHRcdGJvcmRlcldpZHRoOiAxLFxuXHR9ICk7XG59O1xuXG5leHBvcnQgY29uc3QgQmFja2Ryb3BVSSA9IHN0eWxlZC5kaXY8IEJhY2tkcm9wUHJvcHMgPmBcblx0JiYmIHtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7XG5cdFx0Ym90dG9tOiAwO1xuXHRcdGxlZnQ6IDA7XG5cdFx0bWFyZ2luOiAwO1xuXHRcdHBhZGRpbmc6IDA7XG5cdFx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdHJpZ2h0OiAwO1xuXHRcdHRvcDogMDtcblxuXHRcdCR7IGJhY2tkcm9wRm9jdXNlZFN0eWxlcyB9XG5cdFx0JHsgcnRsKCB7IHBhZGRpbmdMZWZ0OiAyIH0gKSB9XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBQcmVmaXggPSBzdHlsZWQuc3BhbmBcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0ZGlzcGxheTogYmxvY2s7XG5gO1xuXG5leHBvcnQgY29uc3QgU3VmZml4ID0gc3R5bGVkLnNwYW5gXG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdGFsaWduLXNlbGY6IHN0cmV0Y2g7XG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdGRpc3BsYXk6IGZsZXg7XG5gO1xuIl19 */"));
export const Prefix = _styled("span", process.env.NODE_ENV === "production" ? {
  target: "em5sgkm1"
} : {
  target: "em5sgkm1",
  label: "Prefix"
})(process.env.NODE_ENV === "production" ? {
  name: "pvvbxf",
  styles: "box-sizing:border-box;display:block"
} : {
  name: "pvvbxf",
  styles: "box-sizing:border-box;display:block",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
export const Suffix = _styled("span", process.env.NODE_ENV === "production" ? {
  target: "em5sgkm0"
} : {
  target: "em5sgkm0",
  label: "Suffix"
})(process.env.NODE_ENV === "production" ? {
  name: "jgf79h",
  styles: "align-items:center;align-self:stretch;box-sizing:border-box;display:flex"
} : {
  name: "jgf79h",
  styles: "align-items:center;align-self:stretch;box-sizing:border-box;display:flex",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
//# sourceMappingURL=input-control-styles.js.map