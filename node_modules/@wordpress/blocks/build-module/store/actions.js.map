{"version":3,"sources":["@wordpress/blocks/src/store/actions.js"],"names":["castArray","isFunction","isPlainObject","omit","pick","some","applyFilters","isValidIcon","normalizeIconObject","DEPRECATED_ENTRY_KEYS","error","warn","window","console","LEGACY_CATEGORY_MAPPING","common","formatting","layout","processBlockType","blockType","select","name","settings","deprecated","map","deprecation","save","edit","hasOwnProperty","category","getCategories","slug","title","icon","src","addBlockTypes","blockTypes","type","__experimentalRegisterBlockType","dispatch","processedBlockType","__experimentalReapplyBlockTypeFilters","unprocessedBlockTypes","__experimentalGetUnprocessedBlockTypes","processedBlockTypes","Object","keys","reduce","accumulator","blockName","result","push","length","removeBlockTypes","names","addBlockStyles","styles","removeBlockStyles","styleNames","addBlockVariations","variations","removeBlockVariations","variationNames","setDefaultBlockName","setFreeformFallbackBlockName","setUnregisteredFallbackBlockName","setGroupingBlockName","setCategories","categories","updateCategory","addBlockCollection","namespace","removeBlockCollection"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { castArray, isFunction, isPlainObject, omit, pick, some } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { applyFilters } from '@wordpress/hooks';\n\n/**\n * Internal dependencies\n */\nimport { isValidIcon, normalizeIconObject } from '../api/utils';\nimport { DEPRECATED_ENTRY_KEYS } from '../api/constants';\n\n/** @typedef {import('../api/registration').WPBlockVariation} WPBlockVariation */\n\nconst { error, warn } = window.console;\n\n/**\n * Mapping of legacy category slugs to their latest normal values, used to\n * accommodate updates of the default set of block categories.\n *\n * @type {Record<string,string>}\n */\nconst LEGACY_CATEGORY_MAPPING = {\n\tcommon: 'text',\n\tformatting: 'text',\n\tlayout: 'design',\n};\n\n/**\n * Takes the unprocessed block type data and applies all the existing filters for the registered block type.\n * Next, it validates all the settings and performs additional processing to the block type definition.\n *\n * @param {WPBlockType} blockType        Unprocessed block type settings.\n * @param {Object}      thunkArgs        Argument object for the thunk middleware.\n * @param {Function}    thunkArgs.select Function to select from the store.\n *\n * @return {?WPBlockType} The block, if it has been successfully registered; otherwise `undefined`.\n */\nconst processBlockType = ( blockType, { select } ) => {\n\tconst { name } = blockType;\n\n\tconst settings = applyFilters(\n\t\t'blocks.registerBlockType',\n\t\t{ ...blockType },\n\t\tname\n\t);\n\n\tif ( settings.deprecated ) {\n\t\tsettings.deprecated = settings.deprecated.map( ( deprecation ) =>\n\t\t\tpick(\n\t\t\t\t// Only keep valid deprecation keys.\n\t\t\t\tapplyFilters(\n\t\t\t\t\t'blocks.registerBlockType',\n\t\t\t\t\t// Merge deprecation keys with pre-filter settings\n\t\t\t\t\t// so that filters that depend on specific keys being\n\t\t\t\t\t// present don't fail.\n\t\t\t\t\t{\n\t\t\t\t\t\t// Omit deprecation keys here so that deprecations\n\t\t\t\t\t\t// can opt out of specific keys like \"supports\".\n\t\t\t\t\t\t...omit( blockType, DEPRECATED_ENTRY_KEYS ),\n\t\t\t\t\t\t...deprecation,\n\t\t\t\t\t},\n\t\t\t\t\tname\n\t\t\t\t),\n\t\t\t\tDEPRECATED_ENTRY_KEYS\n\t\t\t)\n\t\t);\n\t}\n\n\tif ( ! isPlainObject( settings ) ) {\n\t\terror( 'Block settings must be a valid object.' );\n\t\treturn;\n\t}\n\n\tif ( ! isFunction( settings.save ) ) {\n\t\terror( 'The \"save\" property must be a valid function.' );\n\t\treturn;\n\t}\n\tif ( 'edit' in settings && ! isFunction( settings.edit ) ) {\n\t\terror( 'The \"edit\" property must be a valid function.' );\n\t\treturn;\n\t}\n\n\t// Canonicalize legacy categories to equivalent fallback.\n\tif ( LEGACY_CATEGORY_MAPPING.hasOwnProperty( settings.category ) ) {\n\t\tsettings.category = LEGACY_CATEGORY_MAPPING[ settings.category ];\n\t}\n\n\tif (\n\t\t'category' in settings &&\n\t\t! some( select.getCategories(), {\n\t\t\tslug: settings.category,\n\t\t} )\n\t) {\n\t\twarn(\n\t\t\t'The block \"' +\n\t\t\t\tname +\n\t\t\t\t'\" is registered with an invalid category \"' +\n\t\t\t\tsettings.category +\n\t\t\t\t'\".'\n\t\t);\n\t\tdelete settings.category;\n\t}\n\n\tif ( ! ( 'title' in settings ) || settings.title === '' ) {\n\t\terror( 'The block \"' + name + '\" must have a title.' );\n\t\treturn;\n\t}\n\tif ( typeof settings.title !== 'string' ) {\n\t\terror( 'Block titles must be strings.' );\n\t\treturn;\n\t}\n\n\tsettings.icon = normalizeIconObject( settings.icon );\n\tif ( ! isValidIcon( settings.icon.src ) ) {\n\t\terror(\n\t\t\t'The icon passed is invalid. ' +\n\t\t\t\t'The icon should be a string, an element, a function, or an object following the specifications documented in https://developer.wordpress.org/block-editor/developers/block-api/block-registration/#icon-optional'\n\t\t);\n\t\treturn;\n\t}\n\n\treturn settings;\n};\n\n/**\n * Returns an action object used in signalling that block types have been added.\n *\n * @param {Array|Object} blockTypes Block types received.\n *\n * @return {Object} Action object.\n */\nexport function addBlockTypes( blockTypes ) {\n\treturn {\n\t\ttype: 'ADD_BLOCK_TYPES',\n\t\tblockTypes: castArray( blockTypes ),\n\t};\n}\n\n/**\n * Signals that the passed block type's settings should be stored in the state.\n *\n * @param {WPBlockType} blockType Unprocessed block type settings.\n */\nexport const __experimentalRegisterBlockType = ( blockType ) => ( {\n\tdispatch,\n\tselect,\n} ) => {\n\tdispatch( {\n\t\ttype: 'ADD_UNPROCESSED_BLOCK_TYPE',\n\t\tblockType,\n\t} );\n\n\tconst processedBlockType = processBlockType( blockType, { select } );\n\tif ( ! processedBlockType ) {\n\t\treturn;\n\t}\n\tdispatch.addBlockTypes( processedBlockType );\n};\n\n/**\n * Signals that all block types should be computed again.\n * It uses stored unprocessed block types and all the most recent list of registered filters.\n *\n * It addresses the issue where third party block filters get registered after third party blocks. A sample sequence:\n *   1. Filter A.\n *   2. Block B.\n *   3. Block C.\n *   4. Filter D.\n *   5. Filter E.\n *   6. Block F.\n *   7. Filter G.\n * In this scenario some filters would not get applied for all blocks because they are registered too late.\n */\nexport const __experimentalReapplyBlockTypeFilters = () => ( {\n\tdispatch,\n\tselect,\n} ) => {\n\tconst unprocessedBlockTypes = select.__experimentalGetUnprocessedBlockTypes();\n\n\tconst processedBlockTypes = Object.keys( unprocessedBlockTypes ).reduce(\n\t\t( accumulator, blockName ) => {\n\t\t\tconst result = processBlockType(\n\t\t\t\tunprocessedBlockTypes[ blockName ],\n\t\t\t\t{ select }\n\t\t\t);\n\t\t\tif ( result ) {\n\t\t\t\taccumulator.push( result );\n\t\t\t}\n\t\t\treturn accumulator;\n\t\t},\n\t\t[]\n\t);\n\n\tif ( ! processedBlockTypes.length ) {\n\t\treturn;\n\t}\n\n\tdispatch.addBlockTypes( processedBlockTypes );\n};\n\n/**\n * Returns an action object used to remove a registered block type.\n *\n * @param {string|Array} names Block name.\n *\n * @return {Object} Action object.\n */\nexport function removeBlockTypes( names ) {\n\treturn {\n\t\ttype: 'REMOVE_BLOCK_TYPES',\n\t\tnames: castArray( names ),\n\t};\n}\n\n/**\n * Returns an action object used in signalling that new block styles have been added.\n *\n * @param {string}       blockName Block name.\n * @param {Array|Object} styles    Block styles.\n *\n * @return {Object} Action object.\n */\nexport function addBlockStyles( blockName, styles ) {\n\treturn {\n\t\ttype: 'ADD_BLOCK_STYLES',\n\t\tstyles: castArray( styles ),\n\t\tblockName,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that block styles have been removed.\n *\n * @param {string}       blockName  Block name.\n * @param {Array|string} styleNames Block style names.\n *\n * @return {Object} Action object.\n */\nexport function removeBlockStyles( blockName, styleNames ) {\n\treturn {\n\t\ttype: 'REMOVE_BLOCK_STYLES',\n\t\tstyleNames: castArray( styleNames ),\n\t\tblockName,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that new block variations have been added.\n *\n * @param {string}                              blockName  Block name.\n * @param {WPBlockVariation|WPBlockVariation[]} variations Block variations.\n *\n * @return {Object} Action object.\n */\nexport function addBlockVariations( blockName, variations ) {\n\treturn {\n\t\ttype: 'ADD_BLOCK_VARIATIONS',\n\t\tvariations: castArray( variations ),\n\t\tblockName,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that block variations have been removed.\n *\n * @param {string}          blockName      Block name.\n * @param {string|string[]} variationNames Block variation names.\n *\n * @return {Object} Action object.\n */\nexport function removeBlockVariations( blockName, variationNames ) {\n\treturn {\n\t\ttype: 'REMOVE_BLOCK_VARIATIONS',\n\t\tvariationNames: castArray( variationNames ),\n\t\tblockName,\n\t};\n}\n\n/**\n * Returns an action object used to set the default block name.\n *\n * @param {string} name Block name.\n *\n * @return {Object} Action object.\n */\nexport function setDefaultBlockName( name ) {\n\treturn {\n\t\ttype: 'SET_DEFAULT_BLOCK_NAME',\n\t\tname,\n\t};\n}\n\n/**\n * Returns an action object used to set the name of the block used as a fallback\n * for non-block content.\n *\n * @param {string} name Block name.\n *\n * @return {Object} Action object.\n */\nexport function setFreeformFallbackBlockName( name ) {\n\treturn {\n\t\ttype: 'SET_FREEFORM_FALLBACK_BLOCK_NAME',\n\t\tname,\n\t};\n}\n\n/**\n * Returns an action object used to set the name of the block used as a fallback\n * for unregistered blocks.\n *\n * @param {string} name Block name.\n *\n * @return {Object} Action object.\n */\nexport function setUnregisteredFallbackBlockName( name ) {\n\treturn {\n\t\ttype: 'SET_UNREGISTERED_FALLBACK_BLOCK_NAME',\n\t\tname,\n\t};\n}\n\n/**\n * Returns an action object used to set the name of the block used\n * when grouping other blocks\n * eg: in \"Group/Ungroup\" interactions\n *\n * @param {string} name Block name.\n *\n * @return {Object} Action object.\n */\nexport function setGroupingBlockName( name ) {\n\treturn {\n\t\ttype: 'SET_GROUPING_BLOCK_NAME',\n\t\tname,\n\t};\n}\n\n/**\n * Returns an action object used to set block categories.\n *\n * @param {Object[]} categories Block categories.\n *\n * @return {Object} Action object.\n */\nexport function setCategories( categories ) {\n\treturn {\n\t\ttype: 'SET_CATEGORIES',\n\t\tcategories,\n\t};\n}\n\n/**\n * Returns an action object used to update a category.\n *\n * @param {string} slug     Block category slug.\n * @param {Object} category Object containing the category properties that should be updated.\n *\n * @return {Object} Action object.\n */\nexport function updateCategory( slug, category ) {\n\treturn {\n\t\ttype: 'UPDATE_CATEGORY',\n\t\tslug,\n\t\tcategory,\n\t};\n}\n\n/**\n * Returns an action object used to add block collections\n *\n * @param {string} namespace The namespace of the blocks to put in the collection\n * @param {string} title     The title to display in the block inserter\n * @param {Object} icon      (optional) The icon to display in the block inserter\n *\n * @return {Object} Action object.\n */\nexport function addBlockCollection( namespace, title, icon ) {\n\treturn {\n\t\ttype: 'ADD_BLOCK_COLLECTION',\n\t\tnamespace,\n\t\ttitle,\n\t\ticon,\n\t};\n}\n\n/**\n * Returns an action object used to remove block collections\n *\n * @param {string} namespace The namespace of the blocks to put in the collection\n *\n * @return {Object} Action object.\n */\nexport function removeBlockCollection( namespace ) {\n\treturn {\n\t\ttype: 'REMOVE_BLOCK_COLLECTION',\n\t\tnamespace,\n\t};\n}\n"]}