{"version":3,"sources":["@wordpress/rich-text/src/create.js"],"names":["select","store","richTextStore","createElement","mergePair","LINE_SEPARATOR","OBJECT_REPLACEMENT_CHARACTER","ZWNBSP","createEmptyValue","formats","replacements","text","toFormat","type","attributes","formatType","class","getFormatTypeForClassName","replace","className","trim","getFormatTypeForBareElement","__experimentalCreatePrepareEditableTree","__experimentalCreateOnChangeEditableValue","name","registeredAttributes","unregisteredAttributes","_attributes","key","__unstableFilterAttributeValue","create","element","html","range","multilineTag","multilineWrapperTags","__unstableIsEditableTree","isEditableTree","preserveWhiteSpace","length","Array","document","createFromElement","createFromMultilineElement","accumulateSelection","accumulator","node","value","parentNode","startContainer","startOffset","endContainer","endOffset","currentLength","start","undefined","nodeType","TEXT_NODE","childNodes","end","filterRange","filter","nodeValue","slice","collapseWhiteSpace","string","removeReservedCharacters","RegExp","currentWrapperTags","hasChildNodes","index","nodeName","toLowerCase","ELEMENT_NODE","getAttribute","encodeURIComponent","innerHTML","format","getAttributes","indexOf","mergeFormats","newFormats","from","children","hasAttributes","i","safeName","test"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { select } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { store as richTextStore } from './store';\nimport { createElement } from './create-element';\nimport { mergePair } from './concat';\nimport {\n\tLINE_SEPARATOR,\n\tOBJECT_REPLACEMENT_CHARACTER,\n\tZWNBSP,\n} from './special-characters';\n\n/**\n * @typedef {Object} RichTextFormat\n *\n * @property {string} type Format type.\n */\n\n/**\n * @typedef {Array<RichTextFormat>} RichTextFormatList\n */\n\n/**\n * @typedef {Object} RichTextValue\n *\n * @property {string}                    text         Text.\n * @property {Array<RichTextFormatList>} formats      Formats.\n * @property {Array<RichTextFormat>}     replacements Replacements.\n * @property {number|undefined}          start        Selection start.\n * @property {number|undefined}          end          Selection end.\n */\n\nfunction createEmptyValue() {\n\treturn {\n\t\tformats: [],\n\t\treplacements: [],\n\t\ttext: '',\n\t};\n}\n\nfunction toFormat( { type, attributes } ) {\n\tlet formatType;\n\n\tif ( attributes && attributes.class ) {\n\t\tformatType = select( richTextStore ).getFormatTypeForClassName(\n\t\t\tattributes.class\n\t\t);\n\n\t\tif ( formatType ) {\n\t\t\t// Preserve any additional classes.\n\t\t\tattributes.class = ` ${ attributes.class } `\n\t\t\t\t.replace( ` ${ formatType.className } `, ' ' )\n\t\t\t\t.trim();\n\n\t\t\tif ( ! attributes.class ) {\n\t\t\t\tdelete attributes.class;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( ! formatType ) {\n\t\tformatType = select( richTextStore ).getFormatTypeForBareElement(\n\t\t\ttype\n\t\t);\n\t}\n\n\tif ( ! formatType ) {\n\t\treturn attributes ? { type, attributes } : { type };\n\t}\n\n\tif (\n\t\tformatType.__experimentalCreatePrepareEditableTree &&\n\t\t! formatType.__experimentalCreateOnChangeEditableValue\n\t) {\n\t\treturn null;\n\t}\n\n\tif ( ! attributes ) {\n\t\treturn { type: formatType.name };\n\t}\n\n\tconst registeredAttributes = {};\n\tconst unregisteredAttributes = {};\n\tconst _attributes = { ...attributes };\n\n\tfor ( const key in formatType.attributes ) {\n\t\tconst name = formatType.attributes[ key ];\n\n\t\tregisteredAttributes[ key ] = _attributes[ name ];\n\n\t\tif ( formatType.__unstableFilterAttributeValue ) {\n\t\t\tregisteredAttributes[\n\t\t\t\tkey\n\t\t\t] = formatType.__unstableFilterAttributeValue(\n\t\t\t\tkey,\n\t\t\t\tregisteredAttributes[ key ]\n\t\t\t);\n\t\t}\n\n\t\t// delete the attribute and what's left is considered\n\t\t// to be unregistered.\n\t\tdelete _attributes[ name ];\n\n\t\tif ( typeof registeredAttributes[ key ] === 'undefined' ) {\n\t\t\tdelete registeredAttributes[ key ];\n\t\t}\n\t}\n\n\tfor ( const name in _attributes ) {\n\t\tunregisteredAttributes[ name ] = attributes[ name ];\n\t}\n\n\treturn {\n\t\ttype: formatType.name,\n\t\tattributes: registeredAttributes,\n\t\tunregisteredAttributes,\n\t};\n}\n\n/**\n * Create a RichText value from an `Element` tree (DOM), an HTML string or a\n * plain text string, with optionally a `Range` object to set the selection. If\n * called without any input, an empty value will be created. If\n * `multilineTag` is provided, any content of direct children whose type matches\n * `multilineTag` will be separated by two newlines. The optional functions can\n * be used to filter out content.\n *\n * A value will have the following shape, which you are strongly encouraged not\n * to modify without the use of helper functions:\n *\n * ```js\n * {\n *   text: string,\n *   formats: Array,\n *   replacements: Array,\n *   ?start: number,\n *   ?end: number,\n * }\n * ```\n *\n * As you can see, text and formatting are separated. `text` holds the text,\n * including any replacement characters for objects and lines. `formats`,\n * `objects` and `lines` are all sparse arrays of the same length as `text`. It\n * holds information about the formatting at the relevant text indices. Finally\n * `start` and `end` state which text indices are selected. They are only\n * provided if a `Range` was given.\n *\n * @param {Object}  [$1]                          Optional named arguments.\n * @param {Element} [$1.element]                  Element to create value from.\n * @param {string}  [$1.text]                     Text to create value from.\n * @param {string}  [$1.html]                     HTML to create value from.\n * @param {Range}   [$1.range]                    Range to create value from.\n * @param {string}  [$1.multilineTag]             Multiline tag if the structure is\n *                                                multiline.\n * @param {Array}   [$1.multilineWrapperTags]     Tags where lines can be found if\n *                                                nesting is possible.\n * @param {boolean} [$1.preserveWhiteSpace]       Whether or not to collapse white\n *                                                space characters.\n * @param {boolean} [$1.__unstableIsEditableTree]\n *\n * @return {RichTextValue} A rich text value.\n */\nexport function create( {\n\telement,\n\ttext,\n\thtml,\n\trange,\n\tmultilineTag,\n\tmultilineWrapperTags,\n\t__unstableIsEditableTree: isEditableTree,\n\tpreserveWhiteSpace,\n} = {} ) {\n\tif ( typeof text === 'string' && text.length > 0 ) {\n\t\treturn {\n\t\t\tformats: Array( text.length ),\n\t\t\treplacements: Array( text.length ),\n\t\t\ttext,\n\t\t};\n\t}\n\n\tif ( typeof html === 'string' && html.length > 0 ) {\n\t\t// It does not matter which document this is, we're just using it to\n\t\t// parse.\n\t\telement = createElement( document, html );\n\t}\n\n\tif ( typeof element !== 'object' ) {\n\t\treturn createEmptyValue();\n\t}\n\n\tif ( ! multilineTag ) {\n\t\treturn createFromElement( {\n\t\t\telement,\n\t\t\trange,\n\t\t\tisEditableTree,\n\t\t\tpreserveWhiteSpace,\n\t\t} );\n\t}\n\n\treturn createFromMultilineElement( {\n\t\telement,\n\t\trange,\n\t\tmultilineTag,\n\t\tmultilineWrapperTags,\n\t\tisEditableTree,\n\t\tpreserveWhiteSpace,\n\t} );\n}\n\n/**\n * Helper to accumulate the value's selection start and end from the current\n * node and range.\n *\n * @param {Object} accumulator Object to accumulate into.\n * @param {Node}   node        Node to create value with.\n * @param {Range}  range       Range to create value with.\n * @param {Object} value       Value that is being accumulated.\n */\nfunction accumulateSelection( accumulator, node, range, value ) {\n\tif ( ! range ) {\n\t\treturn;\n\t}\n\n\tconst { parentNode } = node;\n\tconst { startContainer, startOffset, endContainer, endOffset } = range;\n\tconst currentLength = accumulator.text.length;\n\n\t// Selection can be extracted from value.\n\tif ( value.start !== undefined ) {\n\t\taccumulator.start = currentLength + value.start;\n\t\t// Range indicates that the current node has selection.\n\t} else if ( node === startContainer && node.nodeType === node.TEXT_NODE ) {\n\t\taccumulator.start = currentLength + startOffset;\n\t\t// Range indicates that the current node is selected.\n\t} else if (\n\t\tparentNode === startContainer &&\n\t\tnode === startContainer.childNodes[ startOffset ]\n\t) {\n\t\taccumulator.start = currentLength;\n\t\t// Range indicates that the selection is after the current node.\n\t} else if (\n\t\tparentNode === startContainer &&\n\t\tnode === startContainer.childNodes[ startOffset - 1 ]\n\t) {\n\t\taccumulator.start = currentLength + value.text.length;\n\t\t// Fallback if no child inside handled the selection.\n\t} else if ( node === startContainer ) {\n\t\taccumulator.start = currentLength;\n\t}\n\n\t// Selection can be extracted from value.\n\tif ( value.end !== undefined ) {\n\t\taccumulator.end = currentLength + value.end;\n\t\t// Range indicates that the current node has selection.\n\t} else if ( node === endContainer && node.nodeType === node.TEXT_NODE ) {\n\t\taccumulator.end = currentLength + endOffset;\n\t\t// Range indicates that the current node is selected.\n\t} else if (\n\t\tparentNode === endContainer &&\n\t\tnode === endContainer.childNodes[ endOffset - 1 ]\n\t) {\n\t\taccumulator.end = currentLength + value.text.length;\n\t\t// Range indicates that the selection is before the current node.\n\t} else if (\n\t\tparentNode === endContainer &&\n\t\tnode === endContainer.childNodes[ endOffset ]\n\t) {\n\t\taccumulator.end = currentLength;\n\t\t// Fallback if no child inside handled the selection.\n\t} else if ( node === endContainer ) {\n\t\taccumulator.end = currentLength + endOffset;\n\t}\n}\n\n/**\n * Adjusts the start and end offsets from a range based on a text filter.\n *\n * @param {Node}     node   Node of which the text should be filtered.\n * @param {Range}    range  The range to filter.\n * @param {Function} filter Function to use to filter the text.\n *\n * @return {Object|void} Object containing range properties.\n */\nfunction filterRange( node, range, filter ) {\n\tif ( ! range ) {\n\t\treturn;\n\t}\n\n\tconst { startContainer, endContainer } = range;\n\tlet { startOffset, endOffset } = range;\n\n\tif ( node === startContainer ) {\n\t\tstartOffset = filter( node.nodeValue.slice( 0, startOffset ) ).length;\n\t}\n\n\tif ( node === endContainer ) {\n\t\tendOffset = filter( node.nodeValue.slice( 0, endOffset ) ).length;\n\t}\n\n\treturn { startContainer, startOffset, endContainer, endOffset };\n}\n\n/**\n * Collapse any whitespace used for HTML formatting to one space character,\n * because it will also be displayed as such by the browser.\n *\n * @param {string} string\n */\nfunction collapseWhiteSpace( string ) {\n\treturn string.replace( /[\\n\\r\\t]+/g, ' ' );\n}\n\n/**\n * Removes reserved characters used by rich-text (zero width non breaking spaces added by `toTree` and object replacement characters).\n *\n * @param {string} string\n */\nexport function removeReservedCharacters( string ) {\n\t// with the global flag, note that we should create a new regex each time OR reset lastIndex state.\n\treturn string.replace(\n\t\tnew RegExp( `[${ ZWNBSP }${ OBJECT_REPLACEMENT_CHARACTER }]`, 'gu' ),\n\t\t''\n\t);\n}\n\n/**\n * Creates a Rich Text value from a DOM element and range.\n *\n * @param {Object}  $1                        Named argements.\n * @param {Element} [$1.element]              Element to create value from.\n * @param {Range}   [$1.range]                Range to create value from.\n * @param {string}  [$1.multilineTag]         Multiline tag if the structure is\n *                                            multiline.\n * @param {Array}   [$1.multilineWrapperTags] Tags where lines can be found if\n *                                            nesting is possible.\n * @param {boolean} [$1.preserveWhiteSpace]   Whether or not to collapse white\n *                                            space characters.\n * @param {Array}   [$1.currentWrapperTags]\n * @param {boolean} [$1.isEditableTree]\n *\n * @return {RichTextValue} A rich text value.\n */\nfunction createFromElement( {\n\telement,\n\trange,\n\tmultilineTag,\n\tmultilineWrapperTags,\n\tcurrentWrapperTags = [],\n\tisEditableTree,\n\tpreserveWhiteSpace,\n} ) {\n\tconst accumulator = createEmptyValue();\n\n\tif ( ! element ) {\n\t\treturn accumulator;\n\t}\n\n\tif ( ! element.hasChildNodes() ) {\n\t\taccumulateSelection( accumulator, element, range, createEmptyValue() );\n\t\treturn accumulator;\n\t}\n\n\tconst length = element.childNodes.length;\n\n\t// Optimise for speed.\n\tfor ( let index = 0; index < length; index++ ) {\n\t\tconst node = element.childNodes[ index ];\n\t\tconst type = node.nodeName.toLowerCase();\n\n\t\tif ( node.nodeType === node.TEXT_NODE ) {\n\t\t\tlet filter = removeReservedCharacters;\n\n\t\t\tif ( ! preserveWhiteSpace ) {\n\t\t\t\tfilter = ( string ) =>\n\t\t\t\t\tremoveReservedCharacters( collapseWhiteSpace( string ) );\n\t\t\t}\n\n\t\t\tconst text = filter( node.nodeValue );\n\t\t\trange = filterRange( node, range, filter );\n\t\t\taccumulateSelection( accumulator, node, range, { text } );\n\t\t\t// Create a sparse array of the same length as `text`, in which\n\t\t\t// formats can be added.\n\t\t\taccumulator.formats.length += text.length;\n\t\t\taccumulator.replacements.length += text.length;\n\t\t\taccumulator.text += text;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( node.nodeType !== node.ELEMENT_NODE ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (\n\t\t\tisEditableTree &&\n\t\t\t// Ignore any placeholders.\n\t\t\t( node.getAttribute( 'data-rich-text-placeholder' ) ||\n\t\t\t\t// Ignore any line breaks that are not inserted by us.\n\t\t\t\t( type === 'br' &&\n\t\t\t\t\t! node.getAttribute( 'data-rich-text-line-break' ) ) )\n\t\t) {\n\t\t\taccumulateSelection( accumulator, node, range, createEmptyValue() );\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( type === 'script' ) {\n\t\t\tconst value = {\n\t\t\t\tformats: [ , ],\n\t\t\t\treplacements: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\t'data-rich-text-script':\n\t\t\t\t\t\t\t\tnode.getAttribute( 'data-rich-text-script' ) ||\n\t\t\t\t\t\t\t\tencodeURIComponent( node.innerHTML ),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\ttext: OBJECT_REPLACEMENT_CHARACTER,\n\t\t\t};\n\t\t\taccumulateSelection( accumulator, node, range, value );\n\t\t\tmergePair( accumulator, value );\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( type === 'br' ) {\n\t\t\taccumulateSelection( accumulator, node, range, createEmptyValue() );\n\t\t\tmergePair( accumulator, create( { text: '\\n' } ) );\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst format = toFormat( {\n\t\t\ttype,\n\t\t\tattributes: getAttributes( { element: node } ),\n\t\t} );\n\n\t\tif (\n\t\t\tmultilineWrapperTags &&\n\t\t\tmultilineWrapperTags.indexOf( type ) !== -1\n\t\t) {\n\t\t\tconst value = createFromMultilineElement( {\n\t\t\t\telement: node,\n\t\t\t\trange,\n\t\t\t\tmultilineTag,\n\t\t\t\tmultilineWrapperTags,\n\t\t\t\tcurrentWrapperTags: [ ...currentWrapperTags, format ],\n\t\t\t\tisEditableTree,\n\t\t\t\tpreserveWhiteSpace,\n\t\t\t} );\n\n\t\t\taccumulateSelection( accumulator, node, range, value );\n\t\t\tmergePair( accumulator, value );\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst value = createFromElement( {\n\t\t\telement: node,\n\t\t\trange,\n\t\t\tmultilineTag,\n\t\t\tmultilineWrapperTags,\n\t\t\tisEditableTree,\n\t\t\tpreserveWhiteSpace,\n\t\t} );\n\n\t\taccumulateSelection( accumulator, node, range, value );\n\n\t\tif ( ! format ) {\n\t\t\tmergePair( accumulator, value );\n\t\t} else if ( value.text.length === 0 ) {\n\t\t\tif ( format.attributes ) {\n\t\t\t\tmergePair( accumulator, {\n\t\t\t\t\tformats: [ , ],\n\t\t\t\t\treplacements: [ format ],\n\t\t\t\t\ttext: OBJECT_REPLACEMENT_CHARACTER,\n\t\t\t\t} );\n\t\t\t}\n\t\t} else {\n\t\t\t// Indices should share a reference to the same formats array.\n\t\t\t// Only create a new reference if `formats` changes.\n\t\t\tfunction mergeFormats( formats ) {\n\t\t\t\tif ( mergeFormats.formats === formats ) {\n\t\t\t\t\treturn mergeFormats.newFormats;\n\t\t\t\t}\n\n\t\t\t\tconst newFormats = formats\n\t\t\t\t\t? [ format, ...formats ]\n\t\t\t\t\t: [ format ];\n\n\t\t\t\tmergeFormats.formats = formats;\n\t\t\t\tmergeFormats.newFormats = newFormats;\n\n\t\t\t\treturn newFormats;\n\t\t\t}\n\n\t\t\t// Since the formats parameter can be `undefined`, preset\n\t\t\t// `mergeFormats` with a new reference.\n\t\t\tmergeFormats.newFormats = [ format ];\n\n\t\t\tmergePair( accumulator, {\n\t\t\t\t...value,\n\t\t\t\tformats: Array.from( value.formats, mergeFormats ),\n\t\t\t} );\n\t\t}\n\t}\n\n\treturn accumulator;\n}\n\n/**\n * Creates a rich text value from a DOM element and range that should be\n * multiline.\n *\n * @param {Object}  $1                        Named argements.\n * @param {Element} [$1.element]              Element to create value from.\n * @param {Range}   [$1.range]                Range to create value from.\n * @param {string}  [$1.multilineTag]         Multiline tag if the structure is\n *                                            multiline.\n * @param {Array}   [$1.multilineWrapperTags] Tags where lines can be found if\n *                                            nesting is possible.\n * @param {Array}   [$1.currentWrapperTags]   Whether to prepend a line\n *                                            separator.\n * @param {boolean} [$1.preserveWhiteSpace]   Whether or not to collapse white\n *                                            space characters.\n * @param {boolean} [$1.isEditableTree]\n *\n * @return {RichTextValue} A rich text value.\n */\nfunction createFromMultilineElement( {\n\telement,\n\trange,\n\tmultilineTag,\n\tmultilineWrapperTags,\n\tcurrentWrapperTags = [],\n\tisEditableTree,\n\tpreserveWhiteSpace,\n} ) {\n\tconst accumulator = createEmptyValue();\n\n\tif ( ! element || ! element.hasChildNodes() ) {\n\t\treturn accumulator;\n\t}\n\n\tconst length = element.children.length;\n\n\t// Optimise for speed.\n\tfor ( let index = 0; index < length; index++ ) {\n\t\tconst node = element.children[ index ];\n\n\t\tif ( node.nodeName.toLowerCase() !== multilineTag ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst value = createFromElement( {\n\t\t\telement: node,\n\t\t\trange,\n\t\t\tmultilineTag,\n\t\t\tmultilineWrapperTags,\n\t\t\tcurrentWrapperTags,\n\t\t\tisEditableTree,\n\t\t\tpreserveWhiteSpace,\n\t\t} );\n\n\t\t// Multiline value text should be separated by a line separator.\n\t\tif ( index !== 0 || currentWrapperTags.length > 0 ) {\n\t\t\tmergePair( accumulator, {\n\t\t\t\tformats: [ , ],\n\t\t\t\treplacements:\n\t\t\t\t\tcurrentWrapperTags.length > 0\n\t\t\t\t\t\t? [ currentWrapperTags ]\n\t\t\t\t\t\t: [ , ],\n\t\t\t\ttext: LINE_SEPARATOR,\n\t\t\t} );\n\t\t}\n\n\t\taccumulateSelection( accumulator, node, range, value );\n\t\tmergePair( accumulator, value );\n\t}\n\n\treturn accumulator;\n}\n\n/**\n * Gets the attributes of an element in object shape.\n *\n * @param {Object}  $1         Named argements.\n * @param {Element} $1.element Element to get attributes from.\n *\n * @return {Object|void} Attribute object or `undefined` if the element has no\n *                       attributes.\n */\nfunction getAttributes( { element } ) {\n\tif ( ! element.hasAttributes() ) {\n\t\treturn;\n\t}\n\n\tconst length = element.attributes.length;\n\tlet accumulator;\n\n\t// Optimise for speed.\n\tfor ( let i = 0; i < length; i++ ) {\n\t\tconst { name, value } = element.attributes[ i ];\n\n\t\tif ( name.indexOf( 'data-rich-text-' ) === 0 ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst safeName = /^on/i.test( name )\n\t\t\t? 'data-disable-rich-text-' + name\n\t\t\t: name;\n\n\t\taccumulator = accumulator || {};\n\t\taccumulator[ safeName ] = value;\n\t}\n\n\treturn accumulator;\n}\n"]}