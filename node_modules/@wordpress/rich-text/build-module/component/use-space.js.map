{"version":3,"sources":["@wordpress/rich-text/src/component/use-space.js"],"names":["useRefEffect","SPACE","useSpace","element","onKeyDown","event","defaultPrevented","keyCode","altKey","metaKey","ctrlKey","key","target","ownerDocument","execCommand","preventDefault","addEventListener","removeEventListener"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,oBAA7B;AACA,SAASC,KAAT,QAAsB,qBAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,GAAoB;AAC1B,SAAOF,YAAY,CAAIG,OAAF,IAAe;AACnC,aAASC,SAAT,CAAoBC,KAApB,EAA4B;AAC3B;AACA,UAAKA,KAAK,CAACC,gBAAX,EAA8B;AAC7B;AACA;;AAED,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,MAAX;AAAmBC,QAAAA,OAAnB;AAA4BC,QAAAA,OAA5B;AAAqCC,QAAAA;AAArC,UAA6CN,KAAnD,CAN2B,CAQ3B;;AACA,UAAKE,OAAO,KAAKN,KAAZ,IAAqBO,MAArB,IAA+BC,OAA/B,IAA0CC,OAA/C,EAAyD;AACxD;AACA,OAX0B,CAa3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,UAAKC,GAAG,KAAK,GAAb,EAAmB;AAClB;AACA;;AAEDN,MAAAA,KAAK,CAACO,MAAN,CAAaC,aAAb,CAA2BC,WAA3B,CAAwC,YAAxC,EAAsD,KAAtD,EAA6D,GAA7D;AACAT,MAAAA,KAAK,CAACU,cAAN;AACA;;AAEDZ,IAAAA,OAAO,CAACa,gBAAR,CAA0B,SAA1B,EAAqCZ,SAArC;AACA,WAAO,MAAM;AACZD,MAAAA,OAAO,CAACc,mBAAR,CAA6B,SAA7B,EAAwCb,SAAxC;AACA,KAFD;AAGA,GA/CkB,EA+ChB,EA/CgB,CAAnB;AAgDA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useRefEffect } from '@wordpress/compose';\nimport { SPACE } from '@wordpress/keycodes';\n\n/**\n * For some elements like BUTTON and SUMMARY, the space key doesn't insert a\n * space character in some browsers even though the element is editable. We have\n * to manually insert a space and prevent default behaviour.\n *\n * DO NOT limit this behaviour to specific tag names! It would mean that this\n * behaviour is not widely tested. If there's ever any problems, we should find\n * a different solution entirely or remove it entirely.\n */\nexport function useSpace() {\n\treturn useRefEffect( ( element ) => {\n\t\tfunction onKeyDown( event ) {\n\t\t\t// Don't insert a space if default behaviour is prevented.\n\t\t\tif ( event.defaultPrevented ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { keyCode, altKey, metaKey, ctrlKey, key } = event;\n\n\t\t\t// Only consider the space key without modifiers pressed.\n\t\t\tif ( keyCode !== SPACE || altKey || metaKey || ctrlKey ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Disregard character composition that involves the Space key.\n\t\t\t//\n\t\t\t// @see https://github.com/WordPress/gutenberg/issues/35086\n\t\t\t//\n\t\t\t// For example, to input a standalone diacritic (like ´ or `) using a\n\t\t\t// keyboard with dead keys, one must first press the dead key and then\n\t\t\t// press the Space key.\n\t\t\t//\n\t\t\t// Many operating systems handle this in such a way that the second\n\t\t\t// KeyboardEvent contains the property `keyCode: 229`. According to the\n\t\t\t// spec, 229 allows the system to indicate that an Input Method Editor\n\t\t\t// (IDE) is processing some key input.\n\t\t\t//\n\t\t\t// However, Windows doesn't use `keyCode: 229` for dead key composition,\n\t\t\t// instead emitting an event with values `keyCode: SPACE` and `key: '´'`.\n\t\t\t// That is why checking the `key` property for values other than `SPACE`\n\t\t\t// is important.\n\t\t\t//\n\t\t\t// This should serve as a reminder that the `KeyboardEvent.keyCode`\n\t\t\t// attribute is officially deprecated and that we should consider more\n\t\t\t// consistent interfaces.\n\t\t\tif ( key !== ' ' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.target.ownerDocument.execCommand( 'insertText', false, ' ' );\n\t\t\tevent.preventDefault();\n\t\t}\n\n\t\telement.addEventListener( 'keydown', onKeyDown );\n\t\treturn () => {\n\t\t\telement.removeEventListener( 'keydown', onKeyDown );\n\t\t};\n\t}, [] );\n}\n"]}